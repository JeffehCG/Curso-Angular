{"version":3,"sources":["webpack:///./src/app/order/delivery-costs/delivery-costs.component.html","webpack:///./src/app/order/delivery-costs/delivery-costs.component.ts","webpack:///./src/app/order/order-items/order-items.component.html","webpack:///./src/app/order/order-items/order-items.component.ts","webpack:///./src/app/order/order.component.html","webpack:///./src/app/order/order.component.ts","webpack:///./src/app/order/order.model.ts","webpack:///./src/app/order/order.module.ts"],"names":[],"mappings":"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","file":"order-order-module.js","sourcesContent":["module.exports = \"<div class=\\\"table-responsive\\\">\\r\\n  <table class=\\\"table\\\">\\r\\n    <tbody><tr>\\r\\n      <th style=\\\"width:50%\\\">Itens:</th>\\r\\n      <td class=\\\"text-right\\\">{{itemsValue | currency : 'BRL': 'symbol' }}</td>\\r\\n    </tr>\\r\\n    <tr>\\r\\n      <th>Frete:</th>\\r\\n      <td class=\\\"text-right\\\">{{delivery | currency: 'BRL': 'symbol'}}</td>\\r\\n    </tr>\\r\\n    <tr>\\r\\n      <th>Total:</th>\\r\\n      <td class=\\\"text-right\\\">{{total() | currency: 'BRL': 'symbol'}}</td>\\r\\n    </tr>\\r\\n  </tbody></table>\\r\\n</div>\\r\\n\"","import { Component, OnInit, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'mt-delivery-costs',\r\n  templateUrl: './delivery-costs.component.html'\r\n})\r\nexport class DeliveryCostsComponent implements OnInit {\r\n\r\n  //Atributos passados para o componente\r\n  @Input() delivery: number\r\n  @Input() itemsValue: number\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  //Total da compra, frete + itens\r\n  total(): number {\r\n    return this.delivery + this.itemsValue\r\n  }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"col-xs-12\\\" *ngIf=\\\"items.length === 0\\\">\\r\\n  <p>\\r\\n    Não há itens no seu carrinho. Que tal começar por <a [routerLink]=\\\"['/restaurants']\\\">aqui</a>\\r\\n  </p>\\r\\n</div>\\r\\n<div class=\\\"col-xs-12 table-responsive\\\" *ngIf=\\\"items.length > 0\\\">\\r\\n\\r\\n    <table class=\\\"table table-striped\\\">\\r\\n      <thead>\\r\\n      <tr>\\r\\n        <th class=\\\"text-center\\\">Quantidade</th>\\r\\n        <th>Item</th>\\r\\n        <th>Descrição</th>\\r\\n        <th class=\\\"text-right\\\">Subtotal</th>\\r\\n        <th class=\\\"text-right\\\"></th>\\r\\n      </tr>\\r\\n      </thead>\\r\\n      <tbody>\\r\\n      <tr *ngFor=\\\"let item of items\\\">\\r\\n        <td class=\\\"text-center\\\">\\r\\n          <a (click)=\\\"emitDecreaseQty(item)\\\" class=\\\"btn btn-sm\\\"><i class=\\\"fa fa-minus\\\"></i></a> <!-- Botão para aumentar-->\\r\\n          {{item.quantity}}\\r\\n          <a (click)=\\\"emitIncreaseQty(item)\\\" class=\\\"btn btn-sm\\\"><i class=\\\"fa fa-plus\\\"></i></a> <!-- Botão para diminuir-->\\r\\n        </td>\\r\\n        <td>{{item.menuItem.name}}</td>\\r\\n\\r\\n        <td>{{item.menuItem.description}}</td>\\r\\n        <td class=\\\"text-right\\\">{{item.value() | currency: 'BRL': 'symbol'}}</td>\\r\\n        <td class=\\\"text-right\\\">\\r\\n          <a (click)=\\\"emitRemove()\\\" class=\\\"btn btn-sm danger\\\"><i class=\\\"fa fa-remove\\\"></i></a> <!-- Botão para remover-->\\r\\n        </td>\\r\\n      </tr>\\r\\n      </tbody>\\r\\n    </table>\\r\\n  </div>\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CartItem } from 'app/restaurant-detail/shopping-cart/cart-item.model';\r\n\r\n@Component({\r\n  selector: 'mt-order-items',\r\n  templateUrl: './order-items.component.html'\r\n})\r\nexport class OrderItemsComponent implements OnInit {\r\n\r\n  @Input() items: CartItem[] //Recebendo os itens do pedido pelo componente order\r\n\r\n  //Output - enviar dados para outro componente\r\n  @Output() increaseQty = new EventEmitter<CartItem>() //Almentando a quantidade do item\r\n  @Output() decreaseQty = new EventEmitter<CartItem>() //Diminuindo a quantidade do item\r\n  @Output() remove = new EventEmitter<CartItem>() //Removendo o item\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  //Metodo para aumentar quantidade do item\r\n  emitIncreaseQty(item: CartItem){\r\n    this.increaseQty.emit(item)\r\n  }\r\n\r\n  //Metodo para diminuir a quantidade do item\r\n  emitDecreaseQty(item: CartItem){\r\n    this.decreaseQty.emit(item)\r\n  }\r\n\r\n  //Metodo para remover o item\r\n  emitRemove(item: CartItem){\r\n    this.remove.emit(item)\r\n  }\r\n\r\n}\r\n","module.exports = \"<!--INICIO DO CONTEUDO-->\\r\\n<section class=\\\"content-header\\\">\\r\\n</section>\\r\\n\\r\\n<section class=\\\"content\\\">\\r\\n  <section class=\\\"invoice\\\">\\r\\n\\r\\n      <!--{{form.valid}}--> <!-- Exibindo se o formulario é valido, por exemplo (Se um campo for required e ele estiver vazio, o valor é false)-->\\r\\n      <!--{{form.value | json}}--> <!-- Valores do inputs do formulario-->\\r\\n\\r\\n        <!-- novalidate desativa a validação padrão do formulario -->\\r\\n        <!-- <form #form= \\\"ngForm\\\" novalidate> Aplica por padrão a diretiva ngForm (para pegar valor do form , os campos do form etc) -->\\r\\n        <form [formGroup] = \\\"orderForm\\\" novalidate> <!-- Defivindo o formulario como formGroup-->\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-xs-12\\\">\\r\\n              <h2 class=\\\"page-header\\\">\\r\\n                <i class=\\\"fa fa-shopping-cart\\\"></i> Finalize o seu pedido\\r\\n              </h2>\\r\\n            </div>\\r\\n          </div>       \\r\\n          \\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-xs-12 col-sm9\\\">\\r\\n              <p class=\\\"lead\\\">Seus Dados:</p>\\r\\n            </div>\\r\\n            <div class=\\\"col-xs-12 col-sm-3\\\">\\r\\n                <span class=\\\"help-block pull-right has-error-block\\\" *ngIf=\\\"orderForm.hasError('emailsNotMatch')\\\"><i class=\\\"fa fa-check\\\"></i> Email-s não conferem</span> <!-- --> \\r\\n            </div>\\r\\n            <div class=\\\"col-sm-6 col-xs-12\\\">\\r\\n                <mt-input-container errorMessage=\\\"Campo obrigatorio e com 5 caracteres\\\" label=\\\"Nome\\\">\\r\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" placeholder=\\\"Nome\\\" autocomplete=\\\"off\\\"> <!-- ngModel alteração de duas mãos, minlength tamanho minimo do campo-->\\r\\n                </mt-input-container>\\r\\n            </div>\\r\\n            <div class=\\\"col-sm-3 col-xs-6\\\">\\r\\n                <mt-input-container errorMessage=\\\"E-mail invalido\\\" label=\\\"E-mail\\\">\\r\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" autocomplete=\\\"off\\\" placeholder=\\\"E-mail\\\"> <!-- ngModel alteração de duas mãos, minlength tamanho minimo do campo-->\\r\\n                </mt-input-container>\\r\\n            </div>\\r\\n            <div class=\\\"col-sm-3 col-xs-6\\\">\\r\\n                <mt-input-container errorMessage=\\\"E-mail invalido\\\" label=\\\"Confirmação do e-mail\\\">\\r\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"emailConfirmation\\\" placeholder=\\\"Confirmação do e-mail\\\" autocomplete=\\\"off\\\"> <!-- ngModel alteração de duas mãos, minlength tamanho minimo do campo-->\\r\\n                </mt-input-container>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-xs-12\\\">\\r\\n              <p class=\\\"lead\\\">Endereço de Entrega:</p>\\r\\n            </div>\\r\\n            <div class=\\\"col-sm-6 col-xs-12\\\">\\r\\n              <!-- Passando atributos e o input para o componente input-->\\r\\n              <mt-input-container errorMessage=\\\"Campo obrigatorio e com 5 caracteres\\\" label=\\\"Endereço\\\">\\r\\n                  <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"address\\\" placeholder=\\\"Endereço\\\" autocomplete=\\\"off\\\"> <!-- ngModel alteração de duas mãos, minlength tamanho minimo do campo-->\\r\\n              </mt-input-container>\\r\\n            </div>\\r\\n            <div class=\\\"col-sm-3 col-xs-6\\\">\\r\\n              <mt-input-container errorMessage=\\\"Obrigatorio e somente numeros\\\" label=\\\"Numbero\\\">\\r\\n                  <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"number\\\" placeholder=\\\"Número\\\" autocomplete=\\\"off\\\"> <!-- Em pattern você coloca expressões regulares para validar os dados digitados, como por exemplo, validar um cpf, aceitar só numeros etc...-->\\r\\n              </mt-input-container>\\r\\n            </div>\\r\\n            <div class=\\\"col-sm-3 col-xs-6\\\">\\r\\n              <mt-input-container>\\r\\n                  <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"optionalAddress\\\" placeholder=\\\"Complemento\\\" autocomplete=\\\"off\\\">\\r\\n              </mt-input-container>\\r\\n            </div>\\r\\n            <!-- /.col -->\\r\\n          </div>\\r\\n          <!-- /.row -->\\r\\n\\r\\n          <!-- Table row -->\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-xs-12\\\">\\r\\n              <p class=\\\"lead\\\">Itens do Pedido:</p>\\r\\n            </div>\\r\\n            \\r\\n            <mt-order-items [items]=\\\"cartItems()\\\"\\r\\n                (increaseQty)=\\\"increaseQty($event)\\\"\\r\\n                (decreaseQty)=\\\"decreaseQty($event)\\\"\\r\\n                (remove)=\\\"remove($event)\\\"></mt-order-items>\\r\\n\\r\\n            <!-- /.col -->\\r\\n          </div>\\r\\n          <!-- /.row -->\\r\\n\\r\\n          <div class=\\\"row\\\">\\r\\n            <!-- accepted payments column -->\\r\\n            <div class=\\\"col-sm-6 col-xs-12\\\">\\r\\n              <p class=\\\"lead\\\">Formas de Pagamento:</p>\\r\\n\\r\\n                <div class=\\\"form-group\\\">\\r\\n                   <mt-radio [options]='paymentOptions' formControlName=\\\"paymentOption\\\"></mt-radio > <!-- Componente de raio (Passando opções de pagamento-->\\r\\n                </div>\\r\\n\\r\\n            </div>\\r\\n            <!-- /.col -->\\r\\n            <div class=\\\"col-sm-6 col-xs-12\\\">\\r\\n              <p class=\\\"lead\\\">Frete e Total:</p>\\r\\n\\r\\n              <!-- Componente de frete-->\\r\\n              <mt-delivery-costs \\r\\n                [delivery]=\\\"delivery\\\"\\r\\n                [itemsValue]=\\\"itemsValues()\\\"></mt-delivery-costs> <!--Passando atributos para o componete-->\\r\\n                \\r\\n            </div>\\r\\n            <!-- /.col -->\\r\\n          </div>\\r\\n\\r\\n        </form>\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-xs-12\\\">\\r\\n            <!-- Clicando sera enviado o valor do do form (atributos) para o metodo-->\\r\\n            <button (click)=\\\"checkOrder(orderForm.value)\\\" href=\\\"order-summary.html\\\" \\r\\n                    class=\\\"btn btn-success pull-right\\\" [disabled]=\\\"!orderForm.valid || cartItems().length === 0\\\"> <!-- caso formulario não seja valido, desabilitar-->\\r\\n              <i class=\\\"fa fa-credit-card\\\"></i> Concluir Pedido\\r\\n            </button>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n    </section>\\r\\n</section>\\r\\n<!-- FIM DO CONTEUDO-->\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { RadioOption } from 'app/shared/radio/radio-option.model';\r\nimport { OrderService } from './order.service';\r\nimport { CartItem } from 'app/restaurant-detail/shopping-cart/cart-item.model';\r\nimport { Order, OrderItem } from './order.model';\r\nimport {Router} from '@angular/router'\r\nimport { FormGroup, FormBuilder, Validators, AbstractControl, FormControl } from '@angular/forms';\r\n\r\nimport {tap} from 'rxjs/operators'\r\n\r\n@Component({\r\n  selector: 'mt-order',\r\n  templateUrl: './order.component.html'\r\n})\r\nexport class OrderComponent implements OnInit {\r\n\r\n  //Validadores\r\n  emailPattern = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i\r\n  numberPattern = /^[0-9]*$/\r\n\r\n  orderForm: FormGroup //Controle do formulario da pagina(value, validação etc)\r\n\r\n  delivery: number = 8 //Valor do frete\r\n\r\n  orderId: string\r\n\r\n  paymentOptions: RadioOption[] = [ // Opções de pagamento, que não passados para o componente radio\r\n    {label: 'Dinheiro', value:'MON'},\r\n    {label: 'Cartão de Débito', value:'DEB'},\r\n    {label: 'Cartão Refeição', value:'REF'}\r\n  ]\r\n\r\n  constructor(private orderService: OrderService, private router: Router, private formBuilder: FormBuilder) { }\r\n\r\n  ngOnInit() {\r\n    //Controle de formulario\r\n    this.orderForm = this.formBuilder.group({\r\n      //No FormBuilder como padrão, os validadores são executados sempre quando um novo caracter é digitado (Atraves do evento onChange)\r\n      //Com o FormControl no angular 5 e 6 esse comportamento pode ser alterado, executando por exemplo a execução do validados apenas no submit\r\n      name: new FormControl('', {\r\n        validators:[Validators.required, Validators.minLength(5)],\r\n        updateOn: 'blur' //Executar validador apenas no evento blur (Quando é tirado o foco do input)\r\n      }),\r\n      email: this.formBuilder.control('', [Validators.required, Validators.pattern(this.emailPattern)]), //Em pattern é passado um regex\r\n      emailConfirmation: this.formBuilder.control('', [Validators.required, Validators.pattern(this.emailPattern)]), //Validators é um componente de validação do formGroup\r\n      address: this.formBuilder.control('', [Validators.required, Validators.minLength(5)]),\r\n      number: this.formBuilder.control('', [Validators.required, Validators.pattern(this.numberPattern)]),\r\n      optionalAddress: this.formBuilder.control(''),\r\n      paymentOption: this.formBuilder.control('', [Validators.required])\r\n    }, {validator: OrderComponent.equalsTo}) //Passando validador personalizado\r\n\r\n      //Caso queira alterar o comportamento da execução de todos validators pode declarar o formulario interifo como FormControl (Como o exemplo abaixo)\r\n      // this.orderForm = new FormControl({\r\n      //   name: this.formBuilder.control('', [Validators.required, Validators.minLength(5)]),\r\n      //   email: this.formBuilder.control('', [Validators.required, Validators.pattern(this.emailPattern)]), \r\n      //   emailConfirmation: this.formBuilder.control('', [Validators.required, Validators.pattern(this.emailPattern)])\r\n      // }, {validators: [OrderComponent.equalsTo], updateOn: 'blur'})\r\n  }\r\n\r\n  //Validação personalizada, confirmação de email\r\n  static equalsTo(group: AbstractControl): {[key:string] : boolean}{\r\n    const email = group.get('email')\r\n    const emailConfirmation = group.get('emailConfirmation')\r\n    if(!email || !emailConfirmation){\r\n      return undefined\r\n    }\r\n\r\n    if(email.value !== emailConfirmation.value){\r\n      return {emailsNotMatch: true} //Passando a chave para mostrar que os emails não são iguais\r\n    }\r\n    return undefined\r\n  }\r\n\r\n  //Metodo para pegar o valor total dos itens\r\n  itemsValues(): number {\r\n    return this.orderService.itemsValue()\r\n  }\r\n\r\n  //Pegando itens do carrinho\r\n  cartItems(): CartItem[]{\r\n    return this.orderService.cartItems()\r\n  }\r\n\r\n  //Aumentando quantidade\r\n  increaseQty(item: CartItem){\r\n    this.orderService.increaseQty(item)\r\n  }\r\n\r\n  //Diminuindo quantidade\r\n  decreaseQty(item: CartItem){\r\n    this.orderService.decreaseQty(item)\r\n  }\r\n\r\n  //Removendo item\r\n  remove(item:CartItem){\r\n    this.orderService.remove(item)\r\n  }\r\n\r\n  //Metodo usado pelo CanDeactivate(leave-order.guard.ts) para verificar se o pedido foi finalizado\r\n  isOrderCompleted(): boolean{\r\n    return this.orderId !== undefined\r\n  }\r\n\r\n  //Metodo para efetuar pagamento\r\n  checkOrder(order: Order){\r\n    order.orderItems = this.cartItems().map((item: CartItem)=> new OrderItem(item.quantity, item.menuItem.id)) //Pegando cada item do carrinho, e transformando em OrdemItem para o pagamento\r\n    this.orderService.checkOrder(order) //Serviço para mandar para o back\r\n      .pipe(\r\n        tap((orderId: string) => {\r\n          this.orderId = orderId  //Setando o orderId para identificar que o pedido foi concluido\r\n        })\r\n      )\r\n      .subscribe(\r\n        (orderId: string)=>{\r\n          this.router.navigate(['/order-summary']) //Navegando para pagina de sucesso\r\n          this.orderService.clear() //Limpar itens do pedido\r\n        },\r\n        ()=>{}\r\n      )\r\n}\r\n\r\n}\r\n","//Classes para o pagamento\r\n//Dados da compra\r\nclass Order{\r\n    constructor(\r\n        public address: string,\r\n        public number: number,\r\n        public optionalAddress: string,\r\n        public paymentOption: string,\r\n        public orderItems: OrderItem[] = [], //Na compra tera um array de itens\r\n        public id?: string\r\n    ){}\r\n}\r\n\r\n//Items da compra, é enviado para o back apenas a quantidade e o id do item\r\nclass OrderItem{\r\n    constructor(public quantity: number, public menuId: string){}\r\n}\r\n\r\nexport {Order, OrderItem}","//Modulo da compra, separado do modulo principal (app.module.ts) (Feature module)\r\n//Carregado apenas quando é chamado\r\nimport { NgModule} from \"@angular/core\"\r\n\r\n//Componentes do modulo\r\nimport { OrderComponent } from \"./order.component\";\r\nimport { OrderItemsComponent } from \"./order-items/order-items.component\";\r\nimport { DeliveryCostsComponent } from \"./delivery-costs/delivery-costs.component\";\r\n\r\n//Dependecias\r\nimport { SharedModule } from \"app/shared/shared.module\";\r\nimport { RouterModule, Routes} from \"@angular/router\"\r\n\r\n//Guard\r\nimport { LeaveOrderGuard } from \"./leave-order.guard\";\r\n\r\n//Rotas desse modulo\r\nconst ROUTES: Routes = [\r\n    {path: '', component: OrderComponent, //Rota padrão \r\n        canDeactivate:[LeaveOrderGuard] //Associando o CanDeactivate na rota para exibir uma mensagem de confirmação caso usuario saia sem salvar o pedido\r\n    }, \r\n]\r\n\r\n@NgModule({\r\n    declarations:[OrderComponent, OrderItemsComponent, DeliveryCostsComponent], //Componentes\r\n    imports: [SharedModule, RouterModule.forChild(ROUTES)], //Dependecias (Dentro de SharedModulo ja esta sendo exportado algumas dependencias, então não é preciso importar de novo nesse modulo)\r\n    //Nesse modulo não é preciso ter exports que nem no modulo shared, pois ele não sera usuado dentro de nenhum outro modulo, assim não precisando exportar suas dependencias\r\n})\r\nexport class OrderModule{}"],"sourceRoot":""}