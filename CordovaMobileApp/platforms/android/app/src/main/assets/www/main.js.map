{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.api.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.error-handler.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routes.ts","webpack:///./src/app/header/header.component.html","webpack:///./src/app/header/header.component.ts","webpack:///./src/app/header/user-detail/user-detail.component.css","webpack:///./src/app/header/user-detail/user-detail.component.html","webpack:///./src/app/header/user-detail/user-detail.component.ts","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/index.ts","webpack:///./src/app/not-found/not-found.component.html","webpack:///./src/app/not-found/not-found.component.ts","webpack:///./src/app/order-summary/order-summary.component.html","webpack:///./src/app/order-summary/order-summary.component.ts","webpack:///./src/app/order/leave-order.guard.ts","webpack:///./src/app/order/order.service.ts","webpack:///./src/app/restaurant-detail/menu-item/menu-item.component.html","webpack:///./src/app/restaurant-detail/menu-item/menu-item.component.ts","webpack:///./src/app/restaurant-detail/menu/menu.component.html","webpack:///./src/app/restaurant-detail/menu/menu.component.ts","webpack:///./src/app/restaurant-detail/restaurant-detail.component.html","webpack:///./src/app/restaurant-detail/restaurant-detail.component.ts","webpack:///./src/app/restaurant-detail/reviews/reviews.component.html","webpack:///./src/app/restaurant-detail/reviews/reviews.component.ts","webpack:///./src/app/restaurant-detail/shopping-cart/cart-item.model.ts","webpack:///./src/app/restaurant-detail/shopping-cart/shopping-cart.component.html","webpack:///./src/app/restaurant-detail/shopping-cart/shopping-cart.component.ts","webpack:///./src/app/restaurant-detail/shopping-cart/shopping-cart.service.ts","webpack:///./src/app/restaurants/item-restaurant/item-restaurant.component.html","webpack:///./src/app/restaurants/item-restaurant/item-restaurant.component.ts","webpack:///./src/app/restaurants/restaurants.component.html","webpack:///./src/app/restaurants/restaurants.component.ts","webpack:///./src/app/restaurants/restaurants.service.ts","webpack:///./src/app/security/auth.interceptor.ts","webpack:///./src/app/security/loggedin.guard.ts","webpack:///./src/app/security/login/login.component.html","webpack:///./src/app/security/login/login.component.ts","webpack:///./src/app/security/login/login.service.ts","webpack:///./src/app/shared/input/input.component.html","webpack:///./src/app/shared/input/input.component.ts","webpack:///./src/app/shared/messages/notification.service.ts","webpack:///./src/app/shared/messages/snackbar/snackbar.component.css","webpack:///./src/app/shared/messages/snackbar/snackbar.component.html","webpack:///./src/app/shared/messages/snackbar/snackbar.component.ts","webpack:///./src/app/shared/radio/radio.component.html","webpack:///./src/app/shared/radio/radio.component.ts","webpack:///./src/app/shared/rating/rating.component.html","webpack:///./src/app/shared/rating/rating.component.ts","webpack:///./src/app/shared/shared.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA,wCAAwC;AACe;AAEhD,IAAM,QAAQ,GAAG,qEAAW,CAAC,GAAG,EAAC,4EAA4E;;;;;;;;;;;;ACHpH,0mB;;;;;;;;;;;;;;;;;;;;;;;;ACA+C;AAM/C;IAIE;QAFA,YAAO,GAAG,sBAAsB;IAEhB,CAAC;IAEjB,+BAAQ,GAAR;IACA,CAAC;IAPU,YAAY;QAJxB,+DAAS,CAAC;YACT,QAAQ,EAAE,QAAQ;;SAEnB,CAAC;;OACW,YAAY,CASxB;IAAD,mBAAC;CAAA;AATwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNzB,sBAAsB;AACgC;AACqB;AACE;AACf;AAG9D;IAA6C,2CAAY;IAErD,iCACY,EAAuB,EAAE,mDAAmD;IAC5E,QAAkB,EAAE,kJAAkJ;IACtK,IAAY,CAAC,kIAAkI;IACnI,iLAAiL;IACjL,mHAAmH;;QAL3I,YAOI,iBAAO,CAAC,mGAAmG;iBAC9G;QAPW,QAAE,GAAF,EAAE,CAAqB;QACvB,cAAQ,GAAR,QAAQ,CAAU;QAClB,UAAI,GAAJ,IAAI,CAAQ,CAAC,kIAAkI;;IAK3J,CAAC;IAED,0BAA0B;IAC1B,6CAAW,GAAX,UAAY,aAAsC;QAAlD,iBAqBC;QApBG,EAAE,EAAC,aAAa,YAAY,sEAAiB,CAAC,EAAC;YAC3C,IAAM,SAAO,GAAG,aAAa,CAAC,KAAK,CAAC,OAAO,EAAC,4BAA4B;YAExE,sEAAsE;YACtE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;gBACV,MAAM,EAAC,aAAa,CAAC,MAAM,CAAC,EAAC;oBACzB,KAAK,GAAG;wBACJ,uCAAuC;wBACvC,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,0EAAY,CAAC,CAAC,UAAU,EAAE,EAAC,wEAAwE;wBACzH,KAAK,CAAC;oBACN,KAAK,GAAG;wBACJ,KAAI,CAAC,EAAE,CAAC,MAAM,CAAC,SAAO,IAAI,iBAAiB,CAAC,EAAC,uCAAuC;wBACxF,KAAK,CAAC;oBACN,KAAK,GAAG;wBACJ,KAAI,CAAC,EAAE,CAAC,MAAM,CAAC,SAAO,IAAI,gEAAgE,CAAC;wBAC/F,KAAK,CAAC;gBACV,CAAC;YACL,CAAC,CAAC;QACN,CAAC;QACD,iBAAM,WAAW,YAAC,aAAa,CAAC,EAAC,0BAA0B;IAC/D,CAAC;IAlCQ,uBAAuB;QADnC,gEAAU,EAAE,CAAC,mEAAmE;;yCAI7D,yFAAmB;YACb,sDAAQ;YACZ,oDAAM,CAAC,kIAAkI;YACnI,iLAAiL;YACjL,mHAAmH;;OAPlI,uBAAuB,CAoCnC;IAAD,8BAAC;CAAA,CApC4C,0DAAY,GAoCxD;AApCmC;AAsCpC,gDAAgD;AAChD,sDAAsD;AACtD,+BAA+B;AAE/B,iHAAiH;AACjH,mCAAmC;AACnC,4FAA4F;AAE5F,sCAAsC;AACtC,0EAA0E;AAC1E,QAAQ;AAER,gCAAgC;AAChC,4CAA4C;AAC5C,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3DsD;AACQ,CAAC,6DAA6D;AACxE;AACU;AACD,CAAC,wBAAwB;AACb;AACc;AAC1C;AAEjD,0EAAkB,CAAC,iEAAQ,EAAE,IAAI,CAAC,EAAC,kCAAkC;AAErE,4BAA4B;AACU;AAES;AACa;AACN;AACqB;AACuB;AACN;AACpB;AAC0B;AACZ;AACL;AACD;AACZ;AACF;AACe;AAEjF,SAAS;AAC6C;AACtD,iBAAiB;AACjB,sGAAsG;AACtG,mDAAmD;AAEnD,qBAAqB;AACyC;AAqC9D;IAAA;IAAyB,CAAC;IAAb,SAAS;QAnCrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;gBACZ,yEAAe;gBACf,mEAAa;gBACb,wFAAoB;gBACpB,+GAAuB;gBACvB,yGAAyB;gBACzB,qFAAa;gBACb,+GAAqB;gBACrB,mGAAiB;gBACjB,8FAAgB;gBAChB,6FAAqB;gBACrB,iFAAiB;gBACjB,+EAAc;gBACd,8FAAmB;aACpB;YACD,OAAO,EAAE;gBACP,4FAAuB;gBACvB,uEAAa;gBACb,qEAAgB;gBAChB,0DAAW;gBACX,kEAAmB;gBACnB,mEAAY,CAAC,OAAO,EAAE;gBACtB,kCAAkC;gBAClC,4DAAY,CAAC,OAAO,CAAC,kDAAM,EAAE,EAAC,kBAAkB,EAAE,iEAAiB,EAAC,CAAC;aAItE;YACD,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,gEAAgB,EAAE,QAAQ,EAAC,oEAAoB,EAAC;gBAC1D,EAAC,OAAO,EAAE,uDAAS,EAAE,QAAQ,EAAE,IAAI,EAAC;gBACpC,EAAC,OAAO,EAAE,0DAAY,EAAE,QAAQ,EAAE,2EAAuB,EAAC,CAAC;YACvE,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;ACtEtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsD;AACqB;AACiB;AACX;AACT;AACQ;AACZ;AACF;AACR;AAEnD,IAAM,MAAM,GAAW;IAC1B,EAAC,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,kEAAa,EAAC;IACpC,EAAC,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,8EAAc,EAAC;IAC9C,EAAC,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,8EAAc,EAAC;IAC1C,EAAC,IAAI,EAAE,iBAAiB,EAAE,SAAS,EAAE,wGAAyB;QAC1D,QAAQ,EAAE;YACN,EAAC,IAAI,EAAE,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAC;YACjD,EAAC,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,oFAAa,EAAC;YACxC,EAAC,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,6FAAgB,EAAC;SACjD,EAAC;IACN,EAAC,IAAI,EAAE,aAAa,EAAE,SAAS,EAAE,uFAAoB,EAAC;IACtD,2IAA2I;IAC3I,EAAC,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE,kCAAkC;QAC5D,OAAO,EAAE,CAAC,sEAAa,CAAC;QACxB,WAAW,EAAE,CAAC,sEAAa,CAAC,CAAC,gIAAgI;KAChK;IACD,EAAC,IAAI,EAAE,eAAe,EAAE,SAAS,EAAE,4FAAqB,EAAC;IACzD,EAAC,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE,kCAAkC,EAAC;IACjE,EAAC,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,gFAAiB,EAAC;CAE7C;;;;;;;;;;;;ACjCD,6yC;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AAMlD;IAEE;IAAgB,CAAC;IAEjB,kCAAQ,GAAR;IACA,CAAC;IALU,eAAe;QAJ3B,+DAAS,CAAC;YACT,QAAQ,EAAE,WAAW;;SAEtB,CAAC;;OACW,eAAe,CAO3B;IAAD,sBAAC;CAAA;AAP2B;;;;;;;;;;;;ACN5B,kCAAkC,gCAAgC,uBAAuB,2BAA2B,oBAAoB,OAAO,uBAAuB,oBAAoB,8BAA8B,oCAAoC,6BAA6B,2BAA2B,+BAA+B,mBAAmB,wBAAwB,WAAW,OAAO,C;;;;;;;;;;;ACAhZ,6QAA6Q,uCAAuC,aAAa,2P;;;;;;;;;;;;;;;;;;;;;;;;;ACAjU,6FAA6F;AAC3C;AACc;AAQhE;IAEE,6BAAoB,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;IAAI,CAAC;IAEnD,sCAAQ,GAAR;IACA,CAAC;IAED,0BAA0B;IAC1B,kCAAI,GAAJ;QACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI;IAC/B,CAAC;IAED,sCAAsC;IACtC,wCAAU,GAAV;QACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE;IACvC,CAAC;IAED,6CAA6C;IAC7C,mCAAK,GAAL;QACE,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE;IAChC,CAAC;IAED,iCAAiC;IACjC,oCAAM,GAAN;QACE,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;IAC5B,CAAC;IAzBU,mBAAmB;QAL/B,+DAAS,CAAC;YACT,QAAQ,EAAE,gBAAgB;;;SAG3B,CAAC;yCAGkC,6EAAY;OAFnC,mBAAmB,CA2B/B;IAAD,0BAAC;CAAA;AA3B+B;;;;;;;;;;;;ACVhC,wc;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AAMlD;IAEE;IAAgB,CAAC;IAEjB,gCAAQ,GAAR;IACA,CAAC;IALU,aAAa;QAJzB,+DAAS,CAAC;YACT,QAAQ,EAAE,SAAS;;SAEpB,CAAC;;OACW,aAAa,CAOzB;IAAD,oBAAC;CAAA;AAPyB;;;;;;;;;;;;;ACN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgC;AACH;;;;;;;;;;;;ACD7B,4b;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AAMlD;IAEE;IAAgB,CAAC;IAEjB,oCAAQ,GAAR;IACA,CAAC;IALU,iBAAiB;QAJ7B,+DAAS,CAAC;YACT,QAAQ,EAAE,cAAc;;SAEzB,CAAC;;OACW,iBAAiB,CAO7B;IAAD,wBAAC;CAAA;AAP6B;;;;;;;;;;;;ACN9B,qqB;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AAMlD;IAIE;IAAgB,CAAC;IAEjB,wCAAQ,GAAR;IACA,CAAC;IAED,oCAAI,GAAJ;QACE,IAAI,CAAC,KAAK,GAAG,IAAI;IACnB,CAAC;IAXU,qBAAqB;QAJjC,+DAAS,CAAC;YACT,QAAQ,EAAE,kBAAkB;;SAE7B,CAAC;;OACW,qBAAqB,CAYjC;IAAD,4BAAC;CAAA;AAZiC;;;;;;;;;;;;;ACFlC;AAAA;AAAA,uIAAuI;AACvI;IAAA;IAYA,CAAC;IAVG,yBAAyB;IACzB,4DAA4D;IAC5D,+FAA+F;IAC/F,uCAAa,GAAb,UAAc,cAA8B,EAAE,cAAsC,EAAE,UAA+B;QACjH,EAAE,EAAC,CAAC,cAAc,CAAC,gBAAgB,EAAE,CAAC,EAAC;YACnC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,4BAA4B,CAAC;QACvD,CAAC;QAAA,IAAI,EAAC;YACH,MAAM,CAAC,IAAI;QACd,CAAC;IACL,CAAC;IACL,sBAAC;AAAD,CAAC;;AAED,yGAAyG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnB9D;AACI;AACiD;AAI9D;AACK;AAGvC;IACI,sBACY,WAAgC,EAChC,IAAgB;QADhB,gBAAW,GAAX,WAAW,CAAqB;QAChC,SAAI,GAAJ,IAAI,CAAY;IAAE,CAAC;IAE/B,6CAA6C;IAC7C,iCAAU,GAAV;QACI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE;IACnC,CAAC;IAED,4BAA4B;IAC5B,gCAAS,GAAT;QACI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK;IACjC,CAAC;IAED,mCAAmC;IACnC,kCAAW,GAAX,UAAY,IAAc;QACtB,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC;IACtC,CAAC;IAED,mCAAmC;IACnC,kCAAW,GAAX,UAAY,IAAc;QACtB,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC;IACtC,CAAC;IAED,gBAAgB;IAChB,6BAAM,GAAN,UAAO,IAAc;QACjB,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC;IACrC,CAAC;IAED,mBAAmB;IACnB,4BAAK,GAAL;QACI,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE;IAC5B,CAAC;IAED,wEAAwE;IACxE,iCAAU,GAAV,UAAW,KAAY;QAEnB,uFAAuF;QACvF,4LAA4L;QAE5L,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAW,oDAAQ,YAAS,EAAC,KAAK,CAAC;aACnD,IAAI,CAAC,4DAA4D;QAC9D,0DAAG,CAAC,eAAK,IAAI,YAAK,CAAC,EAAE,EAAR,CAAQ,CAAC,CAAC,2BAA2B;SACrD;IACT,CAAC;IA7CQ,YAAY;QADxB,gEAAU,EAAE;yCAGgB,6GAAmB;YAC1B,+DAAU;OAHnB,YAAY,CA8CxB;IAAD,mBAAC;CAAA;AA9CwB;AAgDrB,0CAA0C;AAC1C,kCAAkC;AAClC,sCAAsC;AACtC,6FAA6F;AAC7F,IAAI;AAGJ,6DAA6D;AAC7D,gDAAgD;AAChD,yEAAyE;AACzE,yDAAyD;AACzD,mDAAmD;AACnD,qDAAqD;AACrD,qEAAqE;AACrE,4EAA4E;AAC5E,0EAA0E;AAC1E,IAAI;;;;;;;;;;;;AC1ER,uRAAuR,eAAe,2DAA2D,sBAAsB,0DAA0D,4CAA4C,wP;;;;;;;;;;;;;;;;;;;;;;;;;ACA9Y,CAAC,wEAAwE;AAEvE;AAgBjF;IAQE;QANA,kBAAa,GAAG,OAAO;QAIb,QAAG,GAAG,IAAI,0DAAY;IAEhB,CAAC;IAEjB,oCAAQ,GAAR;IACA,CAAC;IAED,8BAA8B;IAC9B,wCAAY,GAAZ;QACE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;IAC9B,CAAC;IAZQ;QAAR,2DAAK,EAAE;;uDAAmB;IAEjB;QAAT,4DAAM,EAAE;;kDAAuB;IANrB,iBAAiB;QAd7B,+DAAS,CAAC;YACT,QAAQ,EAAE,cAAc;;YAExB,UAAU,EAAE;gBACV,+BAA+B;gBAC/B,mEAAO,CAAC,kBAAkB,EAAE;oBAC1B,iEAAK,CAAC,OAAO,EAAE,iEAAK,CAAC,EAAC,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC;oBACnC,sEAAU,CAAC,eAAe,EAAE;wBAC1B,iEAAK,CAAC,EAAC,OAAO,EAAE,CAAC,EAAE,SAAS,EAAE,mBAAmB,EAAC,CAAC;wBACnD,mEAAO,CAAC,kBAAkB,CAAC;qBAC5B,CAAC;iBACH,CAAC;aACH;SACF,CAAC;;OACW,iBAAiB,CAkB7B;IAAD,wBAAC;CAAA;AAlB6B;;;;;;;;;;;;AClB9B,0f;;;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AACuB;AACxB;AAQjD;IAIE,uBAAoB,kBAAsC,EACtC,KAAqB;QADrB,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,UAAK,GAAL,KAAK,CAAgB;IAAI,CAAC;IAE9C,gCAAQ,GAAR;QACE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,kBAAkB;aAChC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAC,0BAA0B;IACzF,CAAC;IAED,6CAA6C;IAC7C,mCAAW,GAAX,UAAY,IAAc;QACxB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC;IACnB,CAAC;IAfU,aAAa;QAJzB,+DAAS,CAAC;YACT,QAAQ,EAAE,SAAS;;SAEpB,CAAC;yCAKwC,sFAAkB;YAC/B,8DAAc;OAL9B,aAAa,CAgBzB;IAAD,oBAAC;CAAA;AAhByB;;;;;;;;;;;;ACV1B,ukBAAukB,kBAAkB,+DAA+D,oBAAoB,ocAAoc,sBAAsB,kEAAkE,mBAAmB,gEAAgE,mBAAmB,gwB;;;;;;;;;;;;;;;;;;;;;;;;;;ACA5vC;AACD,CAAC,4BAA4B;AAEN,CAAC,uCAAuC;AAOhH;IAIE,mCAAoB,kBAAsC,EACtC,KAAqB;QADrB,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,UAAK,GAAL,KAAK,CAAgB;IAAI,CAAC;IAE9C,4CAAQ,GAAR;QAAA,iBAGC;QAFC,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,8BAA8B;aACpG,SAAS,CAAC,oBAAU,IAAI,YAAI,CAAC,UAAU,GAAG,UAAU,EAA5B,CAA4B,CAAC;IAC1D,CAAC;IAVU,yBAAyB;QAJrC,+DAAS,CAAC;YACT,QAAQ,EAAE,sBAAsB;;SAEjC,CAAC;yCAKwC,mFAAkB;YAC/B,8DAAc;OAL9B,yBAAyB,CAYrC;IAAD,gCAAC;CAAA;AAZqC;;;;;;;;;;;;ACVtC,uVAAuV,eAAe,ieAAie,aAAa,iDAAiD,iCAAiC,kIAAkI,iBAAiB,4E;;;;;;;;;;;;;;;;;;;;;;;;;;ACAvgC;AACyB;AAG1B,CAAC,gCAAgC;AAMlF;IAIE,0BAAoB,iBAAqC,EACrC,KAAqB;QADrB,sBAAiB,GAAjB,iBAAiB,CAAoB;QACrC,UAAK,GAAL,KAAK,CAAgB;IAAI,CAAC;IAE9C,mCAAQ,GAAR;QACE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,iBAAiB;aAClC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAC,uCAAuC;QACrG,gFAAgF;IACpF,CAAC;IAXU,gBAAgB;QAJ5B,+DAAS,CAAC;YACT,QAAQ,EAAE,YAAY;;SAEvB,CAAC;yCAKuC,mFAAkB;YAC9B,8DAAc;OAL9B,gBAAgB,CAa5B;IAAD,uBAAC;CAAA;AAb4B;;;;;;;;;;;;;ACP7B;AAAA;AAAA;IACI,kBAAmB,QAAkB,EAAS,QAAoB;QAApB,uCAAoB;QAA/C,aAAQ,GAAR,QAAQ,CAAU;QAAS,aAAQ,GAAR,QAAQ,CAAY;IAAE,CAAC;IAErE,wBAAK,GAAL;QACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ;IAC9C,CAAC;IACL,eAAC;AAAD,CAAC;;;;;;;;;;;;;ACTD,wrBAAwrB,eAAe,KAAK,oBAAoB,gDAAgD,0CAA0C,sSAAsS,qCAAqC,oe;;;;;;;;;;;;;;;;;;;;;;;;;;ACAnlC;AAEY,CAAC,oCAAoC;AACP;AA8B5F;IAIE,+BAAoB,mBAAwC;QAAxC,wBAAmB,GAAnB,mBAAmB,CAAqB;QAF5D,aAAQ,GAAG,OAAO;IAE8C,CAAC;IAEjE,wCAAQ,GAAR;IACA,CAAC;IAED,+BAA+B;IAC/B,qCAAK,GAAL;QACE,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;IACxC,CAAC;IAED,8BAA8B;IAC9B,qCAAK,GAAL;QACE,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE;IACzC,CAAC;IAED,iBAAiB;IACjB,qCAAK,GAAL;QACE,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE;IAClC,CAAC;IAED,4BAA4B;IAC5B,0CAAU,GAAV,UAAW,IAAS;QAClB,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,IAAI,CAAC;IAC3C,CAAC;IAED,8BAA8B;IAC9B,uCAAO,GAAP,UAAQ,IAAS;QACf,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,IAAI,CAAC;IACxC,CAAC;IAhCU,qBAAqB;QA5BjC,+DAAS,CAAC;YACT,QAAQ,EAAE,kBAAkB;;YAG5B,oHAAoH;YACpH,mBAAmB,EAAE,IAAI;YACzB,0HAA0H;YAC1H,oFAAoF;YAEpF,WAAW;YACX,UAAU,EAAE;gBACV,mEAAO,CAAC,KAAK,EAAE;oBACb,iEAAK,CAAC,OAAO,EAAE,iEAAK,CAAC,EAAC,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC;oBACnC,8BAA8B;oBAC9B,sEAAU,CAAC,eAAe,EAAE,mEAAO,CAAC,kBAAkB,EAAE,qEAAS,CAAC;wBAChE,iEAAK,CAAC,EAAC,OAAO,EAAE,CAAC,EAAE,SAAS,EAAE,mBAAmB,EAAE,MAAM,EAAC,CAAC,EAAC,CAAC;wBAC7D,iEAAK,CAAC,EAAC,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,kBAAkB,EAAE,MAAM,EAAC,GAAG,EAAC,CAAC;wBAChE,iEAAK,CAAC,EAAC,OAAO,EAAE,CAAC,EAAE,SAAS,EAAE,iBAAiB,EAAE,MAAM,EAAC,CAAC,EAAC,CAAC;qBAC5D,CAAC,CAAC,CAAC;oBACJ,4BAA4B;oBAC5B,sEAAU,CAAC,eAAe,EAAE,mEAAO,CAAC,mBAAmB,EAAE,qEAAS,CAAC;wBACjE,iEAAK,CAAC,EAAC,OAAO,EAAE,CAAC,EAAE,SAAS,EAAE,iBAAiB,EAAE,MAAM,EAAC,CAAC,EAAC,CAAC;wBAC3D,iEAAK,CAAC,EAAC,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,mBAAmB,EAAE,MAAM,EAAC,GAAG,EAAC,CAAC;wBACjE,iEAAK,CAAC,EAAC,OAAO,EAAE,CAAC,EAAE,SAAS,EAAE,kBAAkB,EAAE,MAAM,EAAC,CAAC,EAAC,CAAC;qBAC7D,CAAC,CAAC,CAAC;iBACL,CAAC;aACH;SACF,CAAC;yCAKyC,0EAAmB;OAJjD,qBAAqB,CAiCjC;IAAD,4BAAC;CAAA;AAjCiC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjClC,oBAAoB;AACyB;AAEF;AACoC;AAG/E;IAGI,6BAAoB,mBAAwC;QAAxC,wBAAmB,GAAnB,mBAAmB,CAAqB;QAF5D,UAAK,GAAgB,EAAE,gCAA8B;IAES,CAAC;IAE/D,iBAAiB;IACjB,mCAAK,GAAL;QACI,IAAI,CAAC,KAAK,GAAG,EAAE;IACnB,CAAC;IAED,4BAA4B;IAC5B,qCAAO,GAAP,UAAQ,IAAa;QACjB,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAC,KAAK,IAAI,YAAK,CAAC,QAAQ,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE,EAA7B,CAA6B,CAAC,EAAC,mDAAmD;QAC5H,EAAE,EAAC,SAAS,CAAC,EAAC;YACV,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,EAAC,yBAAyB;QACzD,CAAC;QAAA,IAAI,EAAC;YACF,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,yDAAQ,CAAC,IAAI,CAAC,CAAC,EAAC,8BAA8B;QACtE,CAAC;QACD,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,gCAAyB,IAAI,CAAC,IAAM,CAAC,EAAC,mCAAmC;IAC7G,CAAC;IAED,uBAAuB;IACvB,yCAAW,GAAX,UAAY,IAAa;QACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC;IACrC,CAAC;IAED,uBAAuB;IACvB,yCAAW,GAAX,UAAY,IAAc;QACtB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC;QACjC,EAAE,EAAC,IAAI,CAAC,QAAQ,KAAK,CAAC,CAAC,EAAC;YACpB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;QACzB,CAAC;IACL,CAAC;IAED,0BAA0B;IAC1B,wCAAU,GAAV,UAAW,IAAa;QACpB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC;QAC7C,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,8BAAuB,IAAI,CAAC,QAAQ,CAAC,IAAM,CAAC,EAAC,mCAAmC;IACpH,CAAC;IAED,yBAAyB;IACzB,mCAAK,GAAL;QACI,MAAM,CAAC,IAAI,CAAC,KAAK;aACZ,GAAG,CAAC,cAAI,IAAI,WAAI,CAAC,KAAK,EAAE,EAAZ,CAAY,CAAC,CAAC,uFAAuF;aACjH,MAAM,CAAC,UAAC,IAAI,EAAE,KAAK,IAAK,WAAI,GAAC,KAAK,EAAV,CAAU,EAAE,CAAC,CAAC,EAAC,0CAA0C;IAC1F,CAAC;IA7CQ,mBAAmB;QAD/B,gEAAU,EAAE,CAAC,sEAAsE;;yCAIvC,4FAAmB;OAHnD,mBAAmB,CA8C/B;IAAD,0BAAC;CAAA;AA9C+B;;;;;;;;;;;;ACPhC,sXAAsX,iBAAiB,oFAAoF,mBAAmB,yDAAyD,qBAAqB,yDAAyD,6BAA6B,iF;;;;;;;;;;;;;;;;;;;;;;;;;ACA1lB,CAAC,8FAA8F;AACzE;AAmB9E;IAME;QAJA,oBAAe,GAAG,OAAO;IAIT,CAAC;IAEjB,0CAAQ,GAAR;IACA,CAAC;IALQ;QAAR,2DAAK,EAAE;;+DAAuB;IAJpB,uBAAuB;QAdnC,+DAAS,CAAC;YACT,QAAQ,EAAE,oBAAoB;;YAE9B,UAAU,EAAE;gBACV,+BAA+B;gBAC/B,mEAAO,CAAC,oBAAoB,EAAE;oBAC5B,iEAAK,CAAC,OAAO,EAAE,iEAAK,CAAC,EAAC,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC;oBACnC,sEAAU,CAAC,eAAe,EAAE;wBAC1B,iEAAK,CAAC,EAAC,OAAO,EAAE,CAAC,EAAE,SAAS,EAAE,yBAAyB,EAAC,CAAC;wBACzD,mEAAO,CAAC,sBAAsB,CAAC;qBAChC,CAAC;iBACH,CAAC;aACH;SACF,CAAC;;OACW,uBAAuB,CAWnC;IAAD,8BAAC;CAAA;AAXmC;;;;;;;;;;;;ACpBpC,gTAAgT,iBAAiB,gyC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA/Q;AAES,CAAC,gDAAgD;AAC3B;AACZ;AAErE,8CAA8C;AACN;AACqD;AAC7F,oCAAoC;AACpC,sCAAsC;AACtC,4EAA4E;AAC5E,gFAAgF;AAChF,iCAAiC;AAoBjC;IAUE,8BAAoB,kBAAsC,EAAU,EAAe;QAA/D,uBAAkB,GAAlB,kBAAkB,CAAoB;QAAU,OAAE,GAAF,EAAE,CAAa;QARnF,mBAAc,GAAG,QAAQ;IAQ8D,CAAC,CAAC,gCAAgC;IAEzH,uCAAQ,GAAR;QAAA,iBA0BC;QAxBC,sBAAsB;QACtB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC;QACxC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YAC9B,aAAa,EAAE,IAAI,CAAC,aAAa;SAClC,CAAC;QAEF,wBAAwB;QACxB,+FAA+F;QAC/F,IAAI,CAAC,aAAa,CAAC,YAAY;aAC5B,IAAI,CAAC,4DAA4D;QAChE,mEAAY,CAAC,GAAG,CAAC,EAAE,iIAAiI;QACpJ,2EAAoB,EAAE,EAAC,wIAAwI;QAC/J,gEAAS,CAAC,oBAAU;YAClB,YAAI,CAAC,kBAAkB;iBACpB,WAAW,CAAC,UAAU,CAAC,CAAC,kCAAkC;iBAC1D,IAAI,CACH,iEAAU,CAAC,eAAK,IAAG,wDAAI,CAAC,EAAE,CAAC,EAAR,CAAQ,CAAC,CAAC;QAHjC,CAGiC,CAAC,uCAAuC;SACtE,CACN;aACA,SAAS,CAAC,qBAAW,IAAI,YAAI,CAAC,WAAW,GAAG,WAAW,EAA9B,CAA8B,CAAC,EAAC,0DAA0D;QAEtH,4BAA4B;QAC5B,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE;aAClC,SAAS,CAAC,qBAAW,IAAI,YAAI,CAAC,WAAW,GAAG,WAAW,EAA9B,CAA8B,CAAC,EAAC,6EAA6E;IAC3I,CAAC;IAED,wCAAwC;IACxC,2CAAY,GAAZ;QACE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,KAAK,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ;IAC/E,CAAC;IA3CU,oBAAoB;QAlBhC,+DAAS,CAAC;YACT,QAAQ,EAAE,gBAAgB;;YAE1B,UAAU,EAAE;gBACV,mEAAO,CAAC,cAAc,EAAE;oBACtB,iEAAK,CAAC,QAAQ,EAAE,iEAAK,CAAC;wBACpB,OAAO,EAAE,CAAC;wBACV,YAAY,EAAG,KAAK;qBACrB,CAAC,CAAC;oBACH,iEAAK,CAAC,SAAS,EAAE,iEAAK,CAAC;wBACrB,OAAO,EAAE,CAAC;wBACV,YAAY,EAAG,MAAM;wBACrB,YAAY,EAAE,MAAM;qBACrB,CAAC,CAAC;oBACH,sEAAU,CAAC,QAAQ,EAAE,mEAAO,CAAC,sBAAsB,CAAC,CAAC,CAAC,4CAA4C;iBACnG,CAAC;aACH;SACF,CAAC;yCAWwC,uEAAkB,EAAc,0DAAW;OAVxE,oBAAoB,CA6ChC;IAAD,2BAAC;CAAA;AA7CgC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjCjC,4CAA4C;AACJ,CAAC,gEAAgE;AAC9C,CAAC,iDAAiD;AAOvE,CAAC,8BAA8B;AAIrE;IAEI,4BAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;IAAE,CAAC;IAEtC,8EAA8E;IAC9E,wCAAW,GAAX,UAAY,MAAe;QACvB,IAAI,MAAM,GAAgB,SAAS;QACnC,EAAE,EAAC,MAAM,CAAC,EAAC;YACP,MAAM,GAAG,IAAI,+DAAU,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,EAAC,oCAAoC;QACnF,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAkB,iDAAQ,iBAAc,EAAE,EAAC,MAAM,EAAE,MAAM,EAAC,CAAC,EAAC,kIAAkI;IACtN,CAAC;IAED,sCAAsC;IACtC,2CAAc,GAAd,UAAe,EAAS;QACpB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAgB,iDAAQ,qBAAgB,EAAI,CAAC;IACrE,CAAC;IAED,oCAAoC;IACpC,gDAAmB,GAAnB,UAAoB,EAAU;QAC1B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAI,iDAAQ,qBAAgB,EAAE,aAAU,CAAC;IACjE,CAAC;IAED,kCAAkC;IAClC,6CAAgB,GAAhB,UAAiB,EAAU;QACvB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAgB,iDAAQ,qBAAgB,EAAE,UAAO,CAAC;QAGtE,0EAA0E;QAC1E,kEAAkE;QAClE,wDAAwD;IAC5D,CAAC;IA/BQ,kBAAkB;QAD9B,gEAAU,EAAE;yCAGgB,+DAAU;OAF1B,kBAAkB,CAgC9B;IAAD,yBAAC;CAAA;AAhC8B;;;;;;;;;;;;;;;;;;;;;;;;;;ACVsB;AACA;AAGrD;IAEI,yBACY,QAAkB,CAAC,kJAAkJ;;QAArK,aAAQ,GAAR,QAAQ,CAAU,CAAC,kJAAkJ;IAC3K,CAAC;IAEP,+FAA+F;IAC/F,8HAA8H;IAC9H,mCAAS,GAAT,UAAU,OAAyB,EAAE,IAAiB;QAElD,IAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,iEAAY,CAAC,0EAAwE;QAE5H,sHAAsH;QACtH,EAAE,EAAC,YAAY,CAAC,UAAU,EAAE,CAAC,EAAC;YAE1B,6EAA6E;YAC7E,IAAM,WAAW,GAAG,OAAO,CAAC,KAAK,CAAC;gBAC9B,UAAU,EAAC,EAAC,eAAe,EAAE,YAAU,YAAY,CAAC,IAAI,CAAC,WAAa,EAAC,CAAC,0CAA0C;aACrH,CAAC;YACF,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,EAAC,gCAAgC;QACpE,CAAC;QAAA,IAAI,EAAC;YACF,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAC,oFAAoF;QACpH,CAAC;IAEL,CAAC;IAxBQ,eAAe;QAD3B,gEAAU,EAAE;yCAIa,sDAAQ,CAAC,kJAAkJ;;OAHxK,eAAe,CAyB3B;IAAD,sBAAC;CAAA;AAzB2B;;;;;;;;;;;;;;;;;;;;;;;;;;ACNe;AACU;AAErD,+BAA+B;AAE/B,kCAAkC;AAClC,kDAAkD;AAClD,4FAA4F;AAG5F;IAEI,uBAAoB,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;IAAE,CAAC;IAEjD,qDAAqD;IACrD,2CAAmB,GAAnB,UAAoB,IAAY;QAC5B,sCAAsC;QACtC,IAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE;QAC/C,EAAE,EAAC,CAAC,QAAQ,CAAC,EAAC;YACX,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,MAAI,IAAM,CAAC,EAAC,8CAA8C;QAC1F,CAAC;QAED,MAAM,CAAC,QAAQ,EAAC,2FAA2F;IAC/G,CAAC;IAED,mBAAmB;IACnB,+IAA+I;IAC/I,+BAAO,GAAP,UAAQ,KAAY;QAChB,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,IAAI,CAAC;IAC/C,CAAC;IAED,uBAAuB;IACvB,4DAA4D;IAC5D,+FAA+F;IAC/F,mCAAW,GAAX,UAAY,cAAsC,EAAE,UAA+B;QAC/E,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC;IACpE,CAAC;IA1BQ,aAAa;QADzB,gEAAU,EAAE;yCAGyB,iEAAY;OAFrC,aAAa,CA2BzB;IAAD,oBAAC;CAAA;AA3ByB;;;;;;;;;;;;ACX1B,uwC;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AACkB;AACrB;AACgC;AACtB;AAMzD;IAKE,wBACU,EAAe,EACf,YAA0B,EAC1B,mBAAwC,EACxC,cAA8B,EAC9B,MAAc;QAJd,OAAE,GAAF,EAAE,CAAa;QACf,iBAAY,GAAZ,YAAY,CAAc;QAC1B,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,mBAAc,GAAd,cAAc,CAAgB;QAC9B,WAAM,GAAN,MAAM,CAAQ;IAAI,CAAC;IAE7B,iCAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YAC7B,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,KAAK,CAAC,CAAC;YACnE,QAAQ,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;SACrD,CAAC;QAEF,qDAAqD;QACrD,oFAAoF;QACpF,0JAA0J;QAC1J,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC;IAC1E,CAAC;IAED,2BAA2B;IAC3B,8BAAK,GAAL;QAAA,iBAQC;QAPC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC;aAC/E,SAAS,CACR,cAAI,IAAK,KAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,gBAAc,IAAI,CAAC,IAAM,CAAC,GAAC,EACpE,eAAK,IAAK,KAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,GAAC;QAC/D,6EAA6E;QAC7E,cAAO,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAC,CAAC,8GAA8G;SACrK;IACL,CAAC;IAjCU,cAAc;QAJ1B,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;SAErB,CAAC;yCAOc,0DAAW;YACD,2DAAY;YACL,4FAAmB;YACxB,8DAAc;YACtB,sDAAM;OAVb,cAAc,CAmC1B;IAAD,qBAAC;CAAA;AAnC0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACV3B,6BAA6B;AACc;AACO;AAGP;AAEL;AAEkB;AAGxD;IAKI,sBAAoB,IAAe,EAAU,MAAc;QAA3D,iBAQC;QARmB,SAAI,GAAJ,IAAI,CAAW;QAAU,WAAM,GAAN,MAAM,CAAQ;QAEvD,yHAAyH;QACzH,IAAI,CAAC,MAAM,CAAC,MAAM;aACb,IAAI,CAAE,4DAA4D;QAC/D,6DAAM,CAAC,eAAK,IAAI,YAAK,YAAY,6DAAa,EAA9B,CAA8B,CAAC,CAClD;aACA,SAAS,CAAC,UAAC,KAAmB,IAAK,YAAI,CAAC,OAAO,GAAG,KAAK,CAAC,GAAG,EAAxB,CAAwB,CAAC;IACrE,CAAC;IAED,iCAAU,GAAV;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS;IAClC,CAAC;IAED,uDAAuD;IACvD,4BAAK,GAAL,UAAM,KAAa,EAAE,QAAgB;QAArC,iBAMC;QALG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAU,iDAAQ,WAAQ,EACvC,EAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAC,CAAC;aACtC,IAAI,CACD,0DAAG,CAAE,cAAI,IAAI,YAAI,CAAC,IAAI,GAAG,IAAI,EAAhB,CAAgB,CAAC,CAAC,6BAA6B;SAC/D;IACT,CAAC;IAED,6CAA6C;IAC7C,uDAAuD;IACvD,iCAAU,GAAV,UAAW,IAA2B;QAA3B,8BAAe,IAAI,CAAC,OAAO;QAClC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,+DAA+D;IAChH,CAAC;IAED,iCAAiC;IACjC,6BAAM,GAAN;QACI,IAAI,CAAC,IAAI,GAAG,SAAS;IACzB,CAAC;IArCQ,YAAY;QADxB,gEAAU,EAAE;yCAMgB,+DAAU,EAAkB,sDAAM;OALlD,YAAY,CAuCxB;IAAD,mBAAC;CAAA;AAvCwB;;;;;;;;;;;;ACZzB,iWAAiW,OAAO,gWAAgW,cAAc,0E;;;;;;;;;;;;;;;;;;;;;;;;;ACA7nB;AAClC;AAOvD;IAaE;QATS,YAAO,GAAY,IAAI;IAShB,CAAC;IAEjB,iCAAQ,GAAR;IACA,CAAC;IAED,2CAAkB,GAAlB;QACE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO;QACvC,EAAE,EAAC,IAAI,CAAC,KAAK,KAAK,SAAS,CAAC,EAAC;YAC3B,MAAM,IAAI,KAAK,CAAC,+EAA+E,CAAC;QAClG,CAAC;IACH,CAAC;IAED,2CAA2C;IAC3C,mCAAU,GAAV;QACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;IACrE,CAAC;IAED,6CAA6C;IAC7C,iCAAQ,GAAR;QACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;IACvE,CAAC;IA/BQ;QAAR,2DAAK,EAAE;;iDAAc;IACb;QAAR,2DAAK,EAAE;;wDAAqB;IACpB;QAAR,2DAAK,EAAE;;mDAAwB;IAKT;QAAtB,kEAAY,CAAC,sDAAO,CAAC;kCAAQ,sDAAO,CAAC,wEAAwE;QAC9G,gCAAgC;;iDADK;IAEN;QAA9B,kEAAY,CAAC,8DAAe,CAAC;kCAAU,8DAAe;mDAAA;IAX5C,cAAc;QAJ1B,+DAAS,CAAC;YACT,QAAQ,EAAE,oBAAoB;;SAE/B,CAAC;;OACW,cAAc,CAmC1B;IAAD,qBAAC;CAAA;AAnC0B;;;;;;;;;;;;;ACR3B;AAAA;AAAA;AAAA,0EAA0E;AAC7B;AAE7C;IAAA;QACI,aAAQ,GAAG,IAAI,0DAAY,EAAO,EAAC,8EAA8E;IAKrH,CAAC;IAHG,oCAAM,GAAN,UAAO,OAAe;QAClB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,EAAC,gIAAgI;IAChK,CAAC;IACL,0BAAC;AAAD,CAAC;;;;;;;;;;;;;ACTD,4BAA4B,yBAAyB,4BAA4B,+BAA+B,oBAAoB,2BAA2B,2BAA2B,sBAAsB,wBAAwB,mBAAmB,kBAAkB,qBAAqB,KAAK,C;;;;;;;;;;;ACAvS,gKAAgK,SAAS,e;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAvH;AAC8B;AAClB;AAEvB;AACM;AAsB7C;IAME,2BAAoB,mBAAwC;QAAxC,wBAAmB,GAAnB,mBAAmB,CAAqB;QAJ5D,YAAO,GAAW,aAAa;QAE/B,oBAAe,GAAW,QAAQ,EAAC,gDAAgD;IAEnB,CAAC;IAEjE,oCAAQ,GAAR;QAAA,iBAWC;QAVC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,yEAAyE;aACxG,IAAI,CAAC,mEAAmE;QACvE,0DAAG,CAAC,iBAAO;YACT,KAAI,CAAC,OAAO,GAAG,OAAO;YACtB,KAAI,CAAC,eAAe,GAAG,SAAS;QAClC,CAAC,CAAC;QACF,gFAAgF;QAChF,gEAAS,CAAC,iBAAO,IAAI,yDAAK,CAAC,IAAI,CAAC,EAAX,CAAW,CAAC,CAAC,sGAAsG;SACzI;aACA,SAAS,CAAC,eAAK,IAAG,YAAI,CAAC,eAAe,GAAG,QAAQ,EAA/B,CAA+B,CAAC;IACvD,CAAC;IAnBU,iBAAiB;QApB7B,+DAAS,CAAC;YACT,QAAQ,EAAE,aAAa;;;YAGvB,UAAU,EAAE;gBACV,oCAAoC;gBACpC,mEAAO,CAAC,kBAAkB,EAAE;oBAC1B,iEAAK,CAAC,QAAQ,EAAE,iEAAK,CAAC;wBACpB,OAAO,EAAE,CAAC;wBACV,MAAM,EAAE,KAAK;qBACd,CAAC,CAAC;oBACH,iEAAK,CAAC,SAAS,EAAE,iEAAK,CAAC;wBACrB,OAAO,EAAE,CAAC;wBACV,MAAM,EAAE,MAAM;qBACf,CAAC,CAAC;oBACH,sEAAU,CAAC,mBAAmB,EAAE,mEAAO,CAAC,kBAAkB,CAAC,CAAC;oBAC5D,sEAAU,CAAC,mBAAmB,EAAE,mEAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC,iCAAiC;iBAChG,CAAC;aACH;SACF,CAAC;yCAOyC,yEAAmB;OANjD,iBAAiB,CAqB7B;IAAD,wBAAC;CAAA;AArB6B;;;;;;;;;;;;AC3B9B,qRAAqR,qMAAqM,SAAS,UAAU,gBAAgB,aAAa,cAAc,aAAa,cAAc,gCAAgC,aAAa,YAAY,qCAAqC,cAAc,iC;;;;;;;;;;;;;;;;;;;;;;;;;ACA1lB;AACE;AAevE;IAQE;IAAgB,CAAC;uBARN,cAAc;IAUzB,iCAAQ,GAAR;IACA,CAAC;IAED,iCAAQ,GAAR,UAAS,KAAU;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK;QAClB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;IAC3B,CAAC;IAEC,mCAAU,GAAV,UAAW,GAAQ;QACjB,IAAI,CAAC,KAAK,GAAG,GAAG;IAClB,CAAC;IAED,yCAAgB,GAAhB,UAAiB,EAAO;QACtB,IAAI,CAAC,QAAQ,GAAG,EAAE;IACpB,CAAC;IAED,0CAAiB,GAAjB,UAAkB,EAAO;IACzB,CAAC;IAED;;;;;OAKG;IACH,yCAAgB,GAAhB,UAAkB,UAAmB,IAAQ,CAAC;IAjCvC;QAAR,2DAAK,EAAE;;mDAAuB;IAFpB,cAAc;QAX1B,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;YAEpB,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,gEAAiB;oBAC1B,WAAW,EAAE,gEAAU,CAAC,cAAI,uBAAc,EAAd,CAAc,CAAC;oBAC3C,KAAK,EAAE,IAAI;iBACZ;aACF;SACF,CAAC;;OACW,cAAc,CAoC1B;IAAD,qBAAC;;CAAA;AApC0B;;;;;;;;;;;;AChB3B,wsB;;;;;;;;;;;;;;;;;;;;;;;;ACAwE;AAMxE;IAUE;QARU,UAAK,GAAG,IAAI,0DAAY,EAAU,EAAC,oDAAoD;QAEjG,UAAK,GAAc,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAC,0BAA0B;QAEzD,SAAI,GAAW,CAAC,EAAC,+BAA+B;IAIhC,CAAC;IAEjB,kCAAQ,GAAR;IACA,CAAC;IAED,mFAAmF;IACnF,iCAAO,GAAP,UAAQ,CAAS;QACf,IAAI,CAAC,IAAI,GAAG,CAAC;QACb,IAAI,CAAC,YAAY,GAAG,SAAS;QAC7B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,gEAAgE;IACrF,CAAC;IAED,sDAAsD;IACtD,0CAAgB,GAAhB,UAAiB,CAAS;QACxB,EAAE,EAAC,IAAI,CAAC,YAAY,KAAK,SAAS,CAAC,EAAC;YAClC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,IAAI;QAC/B,CAAC;QACD,IAAI,CAAC,IAAI,GAAG,CAAC;IACf,CAAC;IAED,6EAA6E;IAC7E,4CAAkB,GAAlB,UAAmB,CAAS;QAC1B,EAAE,EAAC,IAAI,CAAC,YAAY,KAAK,SAAS,CAAC,EAAC;YAClC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY;YAC7B,IAAI,CAAC,YAAY,GAAG,SAAS;QAC/B,CAAC;IACH,CAAC;IAlCS;QAAT,4DAAM,EAAE;;kDAAmC;IAFjC,eAAe;QAJ3B,+DAAS,CAAC;YACT,QAAQ,EAAE,WAAW;;SAEtB,CAAC;;OACW,eAAe,CAqC3B;IAAD,sBAAC;CAAA;AArC2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACN5B,sDAAsD;AACtD,kEAAkE;AACJ;AAE9D,0CAA0C;AACwB;AACnB;AAE/C,yDAAyD;AACD;AACD;AACG;AACiB;AAE3E,WAAW;AACqF;AACvB;AAClB;AACe;AACN;AACJ;AACE;AAE9D,8CAA8C;AACW,CAAC,6CAA6C;AACvC;AAQhE;IAAA;IAkBA,CAAC;qBAlBY,YAAY;IAErB,wBAAwB;IACjB,oBAAO,GAAd;QACI,MAAM,CAAC;YACH,QAAQ,EAAE,cAAY;YACtB,SAAS,EAAE;gBACP,6GAAmB;gBACnB,sFAAkB;gBAClB,oEAAY;gBACZ,mFAAmB;gBACnB,8EAAY;gBACZ,0EAAa;gBACb,4EAAe;gBACf,EAAC,OAAO,EAAE,uEAAiB,EAAE,QAAQ,EAAE,8EAAe,EAAE,KAAK,EAAC,IAAI,EAAC,CAAC,WAAW;aAClF;SACJ;IACL,CAAC;IAjBQ,YAAY;QANxB,8DAAQ,CAAC;YACN,YAAY,EAAE,CAAC,qEAAc,EAAE,qEAAc,EAAE,wEAAe,EAAE,uFAAiB,CAAC;YAClF,OAAO,EAAE,CAAC,0DAAW,EAAE,kEAAmB,EAAE,4DAAY,CAAC;YACzD,OAAO,EAAE,CAAC,qEAAc,EAAE,qEAAc,EAAE,wEAAe,EAAC,uFAAiB;gBACnE,0DAAW,EAAE,kEAAmB,EAAE,4DAAY,CAAC,CAAC,uIAAuI;SAClM,CAAC;OACW,YAAY,CAkBxB;IAAD,mBAAC;;CAAA;AAlBwB;;;;;;;;;;;;;ACjCzB;AAAA;AAAA,mFAAmF;AACnF,8FAA8F;AAC9F,yEAAyE;AACzE,+EAA+E;AAE/E,yDAAyD;AAClD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;IACjB,GAAG,EAAE,wBAAwB;CAC9B,CAAC;;;;;;;;;;;;;ACTF;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA0B;AAEiD;AAC5B;AACU;AACtB;AAEnC,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,+CAAS,CAAC,CAAC;AACpD,oFAAoF","file":"main.js","sourcesContent":["var map = {\n\t\"./about/about.module\": [\n\t\t\"./src/app/about/about.module.ts\",\n\t\t\"about-about-module\"\n\t],\n\t\"./order/order.module\": [\n\t\t\"./src/app/order/order.module.ts\",\n\t\t\"order-order-module\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar module = __webpack_require__(ids[0]);\n\t\treturn module;\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";\nmodule.exports = webpackAsyncContext;","//Configurações de conexão com o backend\r\nimport {environment} from '../environments/environment'\r\n\r\nexport const MEAT_API = environment.api //Pegando o rost da api, dependendo do ambiente(produção ou desenvolvimento)","module.exports = \"<div class=\\\"wrapper\\\">\\r\\n\\r\\n  <mt-header></mt-header>\\r\\n\\r\\n  <!-- Full Width Column -->\\r\\n  <div class=\\\"content-wrapper\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n\\r\\n      <router-outlet></router-outlet> <!-- Componente de rotas-->\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <!-- snakbar deve ser aqui -->\\r\\n  <mt-snackbar></mt-snackbar>\\r\\n\\r\\n  <footer class=\\\"main-footer\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"pull-right hidden-xs\\\">\\r\\n        <b>Version</b> 1.0.0\\r\\n      </div>\\r\\n      <strong>Meat</strong> Angular Application\\r\\n    </div>\\r\\n  </footer>\\r\\n</div>\\r\\n\"","import {Component, OnInit} from \"@angular/core\"\r\n\r\n@Component({\r\n  selector: 'mt-app',\r\n  templateUrl: 'app.component.html'\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n  content = 'Welcome do Meat App!'\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","//Tratamentos de erros\r\nimport {HttpErrorResponse} from '@angular/common/http'\r\nimport { ErrorHandler, Injectable, Injector, NgZone } from '@angular/core';\r\nimport { NotificationService } from './shared/messages/notification.service';\r\nimport { LoginService } from './security/login/login.service';\r\n\r\n@Injectable() //Interface ErrorHandler (Padrão de tratamento de erros do angular)\r\nexport class ApplicationErrorHandler extends ErrorHandler{ //Metodo que ira receber o erro, e tratalo (possivelmente um response do http)\r\n    \r\n    constructor(\r\n        private ns: NotificationService, //Serviço de exibição de notificação para o usuario\r\n        private injector: Injector, //Injector é referencia para o mecanismo de dependencia do angular ( atraves dele pode obter qualquer objeto dentro do conteniner de dependencia) \r\n        private zone: NgZone //O errorHandler é executado fora da zona do angular, assim muitas vezes ele não consegue alterar atributos na tela para o usuario\r\n                            //(então o NgZone é usado para garantir a execução do errorHandler dentro de uma zona, para ele ser monitorado pelo angular, e assim atualizando o que é preciso após a execução)\r\n                            //O NgZone tambem pode ser executado para garantir que bibliotecas javascript externas sejam executadas em uma zona\r\n    ){\r\n        super() //Nesse caso é preciso chamar o super() , pois a Interface ErrorHandler ja tem um construtor padrão\r\n    }\r\n\r\n    //Metodo para tratar erros\r\n    handleError(errorResponse: HttpErrorResponse | any){\r\n        if(errorResponse instanceof HttpErrorResponse){ //Se o erro for instancia de um response tratalo da maneira abaixo\r\n            const message = errorResponse.error.message //Pegando a mensagem do erro\r\n\r\n            //Garantindo que o codigo abaixo sera executado em uma zona do angular\r\n            this.zone.run(()=>{\r\n                switch(errorResponse.status){ //Tratando os status de erro da requisição\r\n                    case 401:\r\n                        //Redirecionando para a pagina de login\r\n                        this.injector.get(LoginService).hadleLogin() //Pegando a referencia de LoginService e suas dependencias pelo Injector\r\n                    break;\r\n                    case 403:\r\n                        this.ns.notify(message || 'Não autorizado.') //Exibindo a notificação para o usuario\r\n                    break;\r\n                    case 404:\r\n                        this.ns.notify(message || 'Recurso não encontrado. Verifique o console para mais detalhes')\r\n                    break;\r\n                }\r\n            })\r\n        }\r\n        super.handleError(errorResponse) //Exibindo erro no console\r\n    }\r\n\r\n}\r\n\r\n// Metodo tratamento de erro ( primeiro exemplo)\r\n// static handleError(error: HttpErrorResponse | any){\r\n//     let errorMessage: string\r\n\r\n//     if(error instanceof HttpErrorResponse){ //Se o erro for instancia de um response tratalo da maneira abaixo\r\n//         const body = error.error\r\n//         errorMessage = `${error.url}: ${error.status} - ${error.statusText || ''}${body}`\r\n\r\n//     }else{ // se não, exibir o erro\r\n//         errorMessage = error.message ? error.message : error.toString()\r\n//     }\r\n\r\n//     console.log(errorMessage)\r\n//     return Observable.throw(errorMessage)\r\n// }","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule, LOCALE_ID, ErrorHandler } from '@angular/core'; //Local ID - esta sendo usado para converter moeda brasileira\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { RouterModule, PreloadAllModules } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule} from '@angular/forms'; //Modulos de formularios\r\nimport { BrowserAnimationsModule} from '@angular/platform-browser/animations'\r\nimport { LocationStrategy, HashLocationStrategy, registerLocaleData} from '@angular/common'\r\nimport locatePt from '@angular/common/locales/pt'\r\n\r\nregisterLocaleData(locatePt, 'pt') //Definindo a Região para o brasil\r\n\r\n//Importando modulo de rotas\r\nimport { ROUTES } from './app.routes';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { HeaderComponent } from './header/header.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { RestaurantsComponent } from './restaurants/restaurants.component';\r\nimport { ItemRestaurantComponent } from './restaurants/item-restaurant/item-restaurant.component';\r\nimport { RestaurantDetailComponent } from './restaurant-detail/restaurant-detail.component';\r\nimport { MenuComponent } from './restaurant-detail/menu/menu.component';\r\nimport { ShoppingCartComponent } from './restaurant-detail/shopping-cart/shopping-cart.component';\r\nimport { MenuItemComponent } from './restaurant-detail/menu-item/menu-item.component';\r\nimport { ReviewsComponent } from './restaurant-detail/reviews/reviews.component';\r\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\r\nimport { NotFoundComponent } from './not-found/not-found.component'; \r\nimport { LoginComponent } from './security/login/login.component';\r\nimport { UserDetailComponent } from './header/user-detail/user-detail.component'; \r\n\r\n//Modulos\r\nimport { SharedModule } from './shared/shared.module';\r\n//Modulo separado\r\n//Os providers estão sendo exportado em SharedModule.forRoot(), assim não precisando usar o CoreModule\r\n// import { CoreModule } from './core/core.module';\r\n\r\n//ErrorHandler padrão\r\nimport { ApplicationErrorHandler } from './app.error-handler';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HeaderComponent,\r\n    HomeComponent,\r\n    RestaurantsComponent,\r\n    ItemRestaurantComponent,\r\n    RestaurantDetailComponent,\r\n    MenuComponent,\r\n    ShoppingCartComponent,\r\n    MenuItemComponent,\r\n    ReviewsComponent,\r\n    OrderSummaryComponent,\r\n    NotFoundComponent,\r\n    LoginComponent,\r\n    UserDetailComponent,\r\n  ],\r\n  imports: [\r\n    BrowserAnimationsModule, //Modulo de animação\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    FormsModule, //Import para usar modulo de formularios\r\n    ReactiveFormsModule, //Para usar o Formgroup\r\n    SharedModule.forRoot(), //Importando o modulo separado, para usar os componentes (InputComponent, RadioComponent, RatingComponent)\r\n    // CoreModule //Modulo de serviços\r\n    RouterModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules}), //Passando array de rotas importadas, para efetuar a mudança de pagina\r\n    //O PreloadAllModules carrega todos os modulos secundarios em segundo plano,\r\n    //Assim exibindo o modulo principal para o usuario, e por traz carregando os outros,\r\n    //Evitando lentidando no carregamento\r\n  ],\r\n  providers: [{provide: LocationStrategy, useClass:HashLocationStrategy}, //Usando estrategia de hash na navegação, para evitar problema de rota não encontrada no ambiente de produção\r\n              {provide: LOCALE_ID, useValue: 'pt'}, //Declarando serviço, para poder ser injetado pelo angular, e para utilizar valores na moeda brasileira\r\n              {provide: ErrorHandler, useClass: ApplicationErrorHandler}],//Definindo o ApplicationErrorHandler como o padrão para tratar os erros do sistema\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","// Arquivo de rotas\r\nimport { Routes } from '@angular/router';\r\n\r\nimport { HomeComponent } from './home/home.component';\r\nimport { RestaurantsComponent } from './restaurants/restaurants.component';\r\nimport { RestaurantDetailComponent } from './restaurant-detail/restaurant-detail.component';\r\nimport { ReviewsComponent } from './restaurant-detail/reviews/reviews.component';\r\nimport { MenuComponent } from './restaurant-detail/menu/menu.component';\r\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\r\nimport { NotFoundComponent } from './not-found/not-found.component';\r\nimport { LoginComponent } from './security/login/login.component';\r\nimport { LoggedInGuard } from './security/loggedin.guard';\r\n\r\nexport const ROUTES: Routes = [\r\n    {path: '', component: HomeComponent},//Rota padrão\r\n    {path: 'login/:to', component: LoginComponent},\r\n    {path: 'login', component: LoginComponent},\r\n    {path: 'restaurants/:id', component: RestaurantDetailComponent,\r\n        children: [ //Rotas filhas\r\n            {path: '', redirectTo: 'menu', pathMatch: 'full'}, //Filho padrão\r\n            {path: 'menu', component: MenuComponent},\r\n            {path: 'reviews', component: ReviewsComponent}\r\n        ]}, //Rota com parametros\r\n    {path: 'restaurants', component: RestaurantsComponent},\r\n    // Esta rota esta Carregando o modulo de pagamento(loadChildrem- chama modulos separados do componente pricipal tardiamente (lazy-loading))\r\n    {path: 'order', loadChildren: \"./order/order.module#OrderModule\",\r\n        canLoad: [LoggedInGuard], //O modulo de pagamento só sera carregado se atender as condições do CanLoad dentro de LoggedinGuard (Que no caso é estar logado)\r\n        canActivate: [LoggedInGuard] //Após o modulo ser carregado, toda vez que ele for acessado deverar atender as condições do CanActivate dentro de LoggedinGuard\r\n    },\r\n    {path: 'order-summary', component: OrderSummaryComponent},\r\n    {path: 'about', loadChildren: './about/about.module#AboutModule'}, \r\n    {path: '**', component: NotFoundComponent}, //Rota quando usuario digita uma rota inexistente //Ela tem que ficar no final\r\n\r\n]","module.exports = \"<!-- Início do header -->\\r\\n  <header class=\\\"main-header\\\">\\r\\n    <nav class=\\\"navbar navbar-static-top\\\">\\r\\n      <div class=\\\"container\\\">\\r\\n        <div class=\\\"navbar-header\\\">\\r\\n          <a [routerLink]=\\\"['/']\\\" class=\\\"navbar-brand\\\"><b>Meat</b></a>\\r\\n          <button type=\\\"button\\\" class=\\\"navbar-toggle collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbar-collapse\\\">\\r\\n            <i class=\\\"fa fa-bars\\\"></i>\\r\\n          </button>\\r\\n        </div>\\r\\n  \\r\\n        <!-- Collect the nav links, forms, and other content for toggling -->\\r\\n        <div class=\\\"collapse navbar-collapse pull-left\\\" id=\\\"navbar-collapse\\\">\\r\\n          <ul class=\\\"nav navbar-nav\\\">\\r\\n              <li routerLinkActive=\\\"active\\\"><a [routerLink]=\\\"['/restaurants']\\\">Restaurantes</a></li> <!-- routerLink = diretiva de rota--> \\r\\n              <li routerLinkActive=\\\"active\\\"><a [routerLink]=\\\"['/about']\\\">Sobre</a></li><!-- routerLinkActive adiciona determinada classe de css quando o link do filho esta ativa, nesse caso o about-->\\r\\n          </ul>\\r\\n        </div>\\r\\n        <!-- /.navbar-collapse -->\\r\\n\\r\\n        <!-- Componente de botão para ir para o login -->\\r\\n        <mt-user-detail></mt-user-detail>\\r\\n      </div>\\r\\n    </nav>\\r\\n    </header>\\r\\n<!-- Fim do header -->\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'mt-header',\r\n  templateUrl: './header.component.html'\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \".user-menu>span{ /**/\\r\\n    position: relative;\\r\\n    display: block;\\r\\n    padding: 15px 15px;\\r\\n    color: #fff;\\r\\n  }\\r\\n\\r\\n  .user-menu a{\\r\\n    color: #fff;\\r\\n    cursor: pointer\\r\\n  }\\r\\n\\r\\n  @media (max-width: 991px){\\r\\n    .navbar-custom-menu {\\r\\n        display: block;\\r\\n        position: absolute;\\r\\n        top: 0;\\r\\n        right: 40px;\\r\\n      }\\r\\n  }\"","module.exports = \"<div class=\\\"navbar-custom-menu\\\">\\r\\n  <ul class=\\\"nav navbar-nav\\\">\\r\\n    <li class=\\\"user user-menu\\\">\\r\\n\\r\\n      <!-- *ngIf com else - caso a condição não seja verdadeira, é aberto o template notLoggedIn -->\\r\\n      <span *ngIf=\\\"isLoggedIn(); else notLoggedIn\\\">\\r\\n        Olá, {{user().name}} | <a (click)=\\\"logout()\\\">Sair</a>\\r\\n      </span> \\r\\n\\r\\n      <!-- Template que sera aberto no else-->\\r\\n      <ng-template #notLoggedIn>\\r\\n        <a (click)=\\\"login()\\\">Entrar</a>\\r\\n      </ng-template>\\r\\n    </li>\\r\\n  </ul>\\r\\n</div>\\r\\n\"","//Componente do header para redirecionar para tela de login, caso o usuario não esteja logado\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { LoginService } from 'app/security/login/login.service';\r\nimport { User } from 'app/security/login/user.model';\r\n\r\n@Component({\r\n  selector: 'mt-user-detail',\r\n  templateUrl: './user-detail.component.html',\r\n  styleUrls: ['./user-detail.component.css']\r\n})\r\nexport class UserDetailComponent implements OnInit {\r\n\r\n  constructor(private loginService: LoginService) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  //Pegando o usuario logado\r\n  user(): User{\r\n    return this.loginService.user\r\n  }\r\n\r\n  //Verificando se o usuario esta logado\r\n  isLoggedIn(): boolean {\r\n    return this.loginService.isLoggedIn()\r\n  }\r\n\r\n  //Metodo para redirecionar para tela de login\r\n  login(){\r\n    this.loginService.hadleLogin()\r\n  }\r\n\r\n  //Metodo para desconectar usuario\r\n  logout(){\r\n    this.loginService.logout()\r\n  }\r\n\r\n}\r\n","module.exports = \"<!-- INÍCIO DO CONTEÚDO -->\\r\\n<section class=\\\"content-header\\\">\\r\\n</section>\\r\\n\\r\\n<section class=\\\"content\\\">\\r\\n\\r\\n  <div class=\\\"jumbotron welcome-jumbotron\\\">\\r\\n     <h1>Bem vindo ao Meat!</h1>\\r\\n     <p>\\r\\n       Está com fome? Peça e receba em casa.\\r\\n     </p>\\r\\n     <a class=\\\"btn btn-primary btn-lg\\\" [routerLink]=\\\"['/restaurants']\\\">Ver Restaurantes</a>\\r\\n  </div>\\r\\n\\r\\n</section>\\r\\n<!-- FIM DO CONTEÚDO -->\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'mt-home',\r\n  templateUrl: './home.component.html'\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export * from './app.component';\r\nexport * from './app.module';\r\n","module.exports = \"<!-- INÍCIO DO CONTEÚDO -->\\r\\n<section class=\\\"content-header\\\">\\r\\n</section>\\r\\n\\r\\n<!-- Main content -->\\r\\n<section class=\\\"content\\\">\\r\\n\\r\\n  <div class=\\\"jumbotron\\\">\\r\\n    <img src=\\\"assets/img/404.png\\\" /><h2>Página Não Encontrada</h2>\\r\\n    <p>\\r\\n      Está com fome? Acesse a página de <a [routerLink]=\\\"['/restaurants']\\\">restaurantes</a>.\\r\\n    </p>\\r\\n  </div>\\r\\n</section>\\r\\n<!-- FIM DO CONTEÚDO -->\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'mt-not-found',\r\n  templateUrl: './not-found.component.html'\r\n})\r\nexport class NotFoundComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \"<!-- INICIO DO CONTEUDO -->\\r\\n<section class=\\\"content-header\\\">\\r\\n  </section>\\r\\n\\r\\n  <section class=\\\"content\\\">\\r\\n    <div class=\\\"jumbotron\\\">\\r\\n      <h2>Pedido Conluído</h2>\\r\\n      <p>Seu pedido foi recebido pelo restaurante. Prepare a mesa que a comida está chegando!</p>\\r\\n      <p><b>Avalie</b> sua experiência:</p>\\r\\n      <p><mt-rating (rated)=\\\"rate()\\\"></mt-rating></p> <!-- Componente de avaliação-->\\r\\n      <p [hidden]=\\\"!rated\\\"> <!-- Exibido apenas se a avaliação for setada (quando evento rated for emitido)-->\\r\\n        Obrigado pela sua avaliação!\\r\\n      </p>\\r\\n    </div>\\r\\n\\r\\n  </section>\\r\\n  <!-- FIM DO CONTEUDO -->\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'mt-order-summary',\r\n  templateUrl: './order-summary.component.html'\r\n})\r\nexport class OrderSummaryComponent implements OnInit {\r\n\r\n  rated: boolean\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  rate(){\r\n    this.rated = true\r\n  }\r\n}\r\n","//Serviço para confirmar com o usuario, se ele tem certeza de sair sem efetuar o pedido, pois os dados de endereço não seram salvos\r\nimport { CanDeactivate, ActivatedRouteSnapshot, RouterStateSnapshot } from \"@angular/router\";\r\nimport { OrderComponent } from \"./order.component\";\r\n\r\n//A interface CanDeactivate espera um tipo generico, que é o componente que sera associado com esse guard (Nesse caso o OrderComponent)\r\nexport class LeaveOrderGuard implements CanDeactivate<OrderComponent>{\r\n    \r\n    //Metodo de CanDeactivate\r\n    //ActivatedRouteSnapshot - Representa a rota ativada (Atual)\r\n    //RouterStateSnapshot - Arvore de Rotas (Todas rotas que foram acessadas antes da rota ativada)\r\n    canDeactivate(orderComponent: OrderComponent, activatedRoute: ActivatedRouteSnapshot, routeState: RouterStateSnapshot): boolean{\r\n        if(!orderComponent.isOrderCompleted()){\r\n            return window.confirm('Deseja desistir da compra?')\r\n        }else{\r\n           return true \r\n        }\r\n    }\r\n}\r\n\r\n//O metodo CanDeactivate deve ser associado a rota que contenha o componente (nesse caso em order.module)","import { Injectable } from \"@angular/core\";\r\nimport {HttpClient} from '@angular/common/http'\r\nimport { ShoppingCartService } from \"app/restaurant-detail/shopping-cart/shopping-cart.service\";\r\nimport { CartItem } from \"app/restaurant-detail/shopping-cart/cart-item.model\";\r\nimport { Order, OrderItem } from \"./order.model\";\r\nimport { Observable } from \"rxjs\";\r\nimport {map} from 'rxjs/operators'\r\nimport { MEAT_API } from \"app/app.api\";\r\n\r\n@Injectable()\r\nexport class OrderService{\r\n    constructor(\r\n        private cartService: ShoppingCartService, \r\n        private http: HttpClient){}\r\n\r\n    //Pegando o valor total dos itens no carrinho\r\n    itemsValue(): number{\r\n        return this.cartService.total()\r\n    }\r\n\r\n    //Listando itens do carrinho\r\n    cartItems() : CartItem[]{\r\n        return this.cartService.items\r\n    }\r\n\r\n    //Aumentando quantidade do carrinho\r\n    increaseQty(item: CartItem){\r\n        this.cartService.increaseQty(item)\r\n    }\r\n\r\n    //Diminuindo quantidade do carrinho\r\n    decreaseQty(item: CartItem){\r\n        this.cartService.decreaseQty(item)\r\n    }\r\n\r\n    //Removendo item\r\n    remove(item: CartItem){\r\n        this.cartService.removeItem(item)\r\n    }\r\n\r\n    //Limpando a compra\r\n    clear(){\r\n        this.cartService.clear()\r\n    }\r\n\r\n    //Efetuando pagamento (O usuario precisa estar logado para ser efetuado)\r\n    checkOrder(order: Order): Observable<string>{\r\n\r\n        //Para essa requecisão ser efetuada é preciso passar o token de Authorization no Header\r\n        //A adição desse Header esta sendo feita no HttpInterceptor (auth.interceptor.ts) - que interceptar todas requisições http, e trata as mesmas (adicionando ou auterando itens da requisição)\r\n\r\n        return this.http.post<Order>(`${MEAT_API}/orders`,order)\r\n            .pipe(//Utilizado para chamar operadores (filter, tap, map etc...)\r\n                map(order => order.id) //Retornando o ID da compra\r\n            )\r\n    }\r\n}\r\n\r\n    //Setando Header manualmente na requisição\r\n    // let headers = new HttpHeaders()\r\n    // if(this.loginService.isLoggedIn()){\r\n    //     headers = headers.set('Authorization', `Bearer ${this.loginService.user.accessToken}`)\r\n    // }\r\n\r\n\r\n    // //Efetuando pagamento (Versão 4.0.0 para baixo do angular)\r\n    // checkOrder(order: Order): Observable<string>{\r\n    //     const headers = new Headers() //Tipo dos dados enviados para a API\r\n    //     headers.append('Content-Type', 'application/json')\r\n    //     return this.http.post(`${MEAT_API}/orders`, \r\n    //                             JSON.stringify(order),\r\n    //                             new RequestOptions({headers:headers}))\r\n    //                     .map(respose => respose.json()) //Retornando resposta\r\n    //                     .map(order => order.id) //Retornando o ID da compra\r\n    // }","module.exports = \"<div class=\\\"menu-item-info-box\\\" [@menuItemAppeared]=\\\"menuItemState\\\">\\r\\n  <span class=\\\"menu-item-info-box-icon\\\"><img [src]=\\\"menuItem.imagePath\\\"></span>\\r\\n\\r\\n  <div class=\\\"menu-item-info-box-content\\\">\\r\\n    <span class=\\\"menu-item-info-box-text\\\">{{menuItem.name}}</span>\\r\\n    <span class=\\\"menu-item-info-box-detail\\\">{{menuItem.description}}</span>\\r\\n    <span class=\\\"menu-item-info-box-price\\\">{{menuItem.price | currency: 'BRL': 'symbol'}}</span> <!-- Pipe para colocar como formato de moeda-->\\r\\n    <a (click) =\\\"emitAddEvent()\\\" class=\\\"\\\"><i class=\\\"fa fa-plus-circle\\\"></i> Adicionar</a> <!-- Evento de clique chama metodo-->\\r\\n  </div>\\r\\n  <!-- /.info-box-content -->\\r\\n</div>\"","import { Component, OnInit , Input, EventEmitter, Output} from '@angular/core'; //EventEmitter e Output - trabalhar com eventos e eventos personalizados\r\nimport { MenuItem } from './menu-item.model'; //Interface\r\nimport { trigger, state, transition, style, animate } from '@angular/animations';\r\n\r\n@Component({\r\n  selector: 'mt-menu-item',\r\n  templateUrl: './menu-item.component.html',\r\n  animations: [//Animações\r\n    //Animação de entrada na pagina\r\n    trigger('menuItemAppeared', [\r\n      state('ready', style({opacity: 1})),\r\n      transition('void => ready', [ // Void representa quando não esta na aba, ou seja, essa animação sera aplicada quando for entrada na pagina (tambem é possivel aplicar na saida (ready => void))\r\n        style({opacity: 0, transform: 'translateY(-20px)'}), //Aplicando estilo na transição\r\n        animate('500ms 0s ease-in')\r\n      ]) \r\n    ])\r\n  ]\r\n})\r\nexport class MenuItemComponent implements OnInit {\r\n\r\n  menuItemState = \"ready\"\r\n\r\n  @Input() menuItem: MenuItem //Atributo passado pelo componente pai\r\n\r\n  @Output() add = new EventEmitter\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  //Adicionar o item no carrinho\r\n  emitAddEvent(){\r\n    this.add.emit(this.menuItem)\r\n  }\r\n\r\n}\r\n","module.exports = \"<!--INÍCIO DO MENU -->\\r\\n<div class=\\\"col-md-9 col-xs-12\\\">\\r\\n\\r\\n    <!-- Exibindo itens do menu-->\\r\\n    <mt-menu-item \\r\\n      *ngFor=\\\"let item of menu | async\\\" \\r\\n      [menuItem]=\\\"item\\\"\\r\\n      (add)=\\\"shoppingCart.addItem($event)\\\"></mt-menu-item> <!-- clicando em adicionar o objeto do componente sera enviado para o metodo--> \\r\\n</div>\\r\\n<div class=\\\"col-md-3 col-xs-12\\\">\\r\\n  <mt-shopping-cart #shoppingCart></mt-shopping-cart>\\r\\n</div>\\r\\n<!-- FIM DO MENU -->\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { RestaurantsService } from 'app/restaurants/restaurants.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { MenuItem } from '../menu-item/menu-item.model';\r\n\r\n@Component({\r\n  selector: 'mt-menu',\r\n  templateUrl: './menu.component.html'\r\n})\r\nexport class MenuComponent implements OnInit {\r\n\r\n  menu: Observable<MenuItem[]>\r\n\r\n  constructor(private restaurantsService: RestaurantsService,\r\n              private route: ActivatedRoute) { }\r\n\r\n  ngOnInit() {\r\n    this.menu = this.restaurantsService \r\n      .menuOfRestaurant(this.route.parent.snapshot.params['id']) //Pegando os itens do menu\r\n  }\r\n\r\n  //Recebendo item adicionado (para o carrinho)\r\n  addMenuItem(item: MenuItem){\r\n    console.log(item)\r\n  }\r\n}\r\n","module.exports = \"<!-- INÍCIO DO CONTEÚDO -->\\r\\n<section class=\\\"content-header\\\">\\r\\n  <h1>\\r\\n\\r\\n  </h1>\\r\\n</section>\\r\\n\\r\\n\\r\\n<section class=\\\"content\\\">\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-xs-12\\\">\\r\\n        <div class=\\\"box box-solid\\\">\\r\\n          <div class=\\\"box-header with-border\\\">\\r\\n            <i class=\\\"fa fa-home\\\"></i>\\r\\n\\r\\n            <!-- Esta sendo utilizado o ? depois de restaurant, para tornalo um parametro não obrigatorio, assim não dando erro caso demore a requisição para o backend -->\\r\\n            <h3 class=\\\"box-title\\\">{{restaurant?.name}}</h3><span class=\\\"pull-right\\\"><i class=\\\"fa fa-star\\\"></i> {{restaurant?.rating}}</span>\\r\\n          </div>\\r\\n          <!-- /.box-header -->\\r\\n          <div class=\\\"box-body\\\">\\r\\n            <div class=\\\"col-sm-3 col-xs-12\\\" *ngIf=\\\"restaurant\\\"> <!-- Imagem ira aparecer apenas quando restaunt não for null-->\\r\\n              <img class=\\\"box-img-detail\\\" [src]=\\\"restaurant?.imagePath\\\" />\\r\\n            </div>\\r\\n\\r\\n            <dl class=\\\"col-sm-9 col-xs-12\\\">\\r\\n              <dt>Categoria</dt>\\r\\n              <dd>{{restaurant?.category}}</dd>\\r\\n              <dt>Quem somos</dt>\\r\\n              <dd>{{restaurant?.about}}</dd>\\r\\n              <dt>Horários</dt>\\r\\n              <dd>{{restaurant?.hours}}</dd>\\r\\n            </dl>\\r\\n          </div>\\r\\n          <!-- /.box-body -->\\r\\n          <div class=\\\"box-footer detail-footer\\\">\\r\\n          <a class=\\\"pull-left\\\" routerLinkActive=\\\"detail-active\\\" [routerLink]=\\\"['menu']\\\"> <!-- Verificando qual esta ativo, para ativar rota filha-->\\r\\n             Menu\\r\\n          </a>\\r\\n          <a class=\\\"pull-right\\\" routerLinkActive=\\\"detail-active\\\" [routerLink]=\\\"['reviews']\\\"> <!-- Verificando qual esta ativo, para ativar rota filha-->\\r\\n             Avaliações\\r\\n          </a>\\r\\n        </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <!-- /.col-xs-12 -->\\r\\n\\r\\n  </div>\\r\\n\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n    <router-outlet></router-outlet>\\r\\n</div>\\r\\n\\r\\n</section>\\r\\n<!-- FIM DO CONTEÚDO -->\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router'; //Para pegar atributo da URL\r\n\r\nimport { RestaurantsService } from '../restaurants/restaurants.service'; //Serviço que se comunica com o backend\r\nimport { Restaurant } from 'app/restaurants/item-restaurant/restaurant.model';\r\n\r\n@Component({\r\n  selector: 'mt-restaurant-detail',\r\n  templateUrl: './restaurant-detail.component.html'\r\n})\r\nexport class RestaurantDetailComponent implements OnInit {\r\n\r\n  restaurant: Restaurant //Interface\r\n\r\n  constructor(private restaurantsService: RestaurantsService, \r\n              private route: ActivatedRoute) { }\r\n\r\n  ngOnInit() {\r\n    this.restaurantsService.restaurantById(this.route.snapshot.params['id']) //Pegando parametro ID da URL \r\n      .subscribe(restaurant => this.restaurant = restaurant)\r\n  }\r\n\r\n}\r\n","module.exports = \"<!-- INICIO DO CONTEUDO -->\\r\\n<div class=\\\"col-xs-12 col-sm-6\\\" *ngFor=\\\"let review of reviews | async\\\"> <!-- Pipe async ja faz uma subscrib do Observable-->\\r\\n\\r\\n  <div class=\\\"box box-solid\\\">\\r\\n    <div class=\\\"box-header with-border\\\">\\r\\n      <span class=\\\"review-score pull-right\\\"><i class=\\\"fa fa-star\\\"></i> {{review.rating}}</span>\\r\\n      <div class=\\\"user-block\\\">\\r\\n        <img *ngIf=\\\"review.rating < 3 \\\" alt=\\\"User Image\\\" class=\\\"img-circle\\\" src=\\\"assets/img/reactions/pissed.png\\\">\\r\\n        <img *ngIf=\\\"review.rating >= 3 && review.rating < 4 \\\" alt=\\\"User Image\\\" class=\\\"img-circle\\\" src=\\\"assets/img/reactions/soso.png\\\">\\r\\n        <img  *ngIf=\\\"review.rating >= 4 \\\" alt=\\\"User Image\\\" class=\\\"img-circle\\\" src=\\\"assets/img/reactions/loved.png\\\">\\r\\n        <span class=\\\"username\\\">{{review.name}}</span>\\r\\n        <span class=\\\"description\\\">{{review.date | date:'dd/MM/yyyy'}}</span> <!-- Papi data formata a hora recebida-->\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"box-body\\\">\\r\\n      <p>{{review.comments}}</p>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n</div>\\r\\n<!--FIM DO CONTEUDO -->\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { RestaurantsService } from '../../restaurants/restaurants.service';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { ActivatedRoute } from '@angular/router'; //Para pegar o parametro da rota\r\n\r\n@Component({\r\n  selector: 'mt-reviews',\r\n  templateUrl: './reviews.component.html'\r\n})\r\nexport class ReviewsComponent implements OnInit {\r\n\r\n  reviews: Observable<any>\r\n\r\n  constructor(private restaurantService: RestaurantsService,\r\n              private route: ActivatedRoute) { }\r\n\r\n  ngOnInit() {\r\n    this.reviews = this.restaurantService\r\n      .reviewsOfRestaurant(this.route.parent.snapshot.params['id']) //Pegando o parametro do componente pai\r\n      //Não é feito o subscrib aqui por que ele esta sendo feito no Pipe async no html\r\n  }\r\n\r\n}\r\n","//Modelo dos itens no carrinho\r\nimport { MenuItem } from '../menu-item/menu-item.model'; //Modelo do item do menu\r\n\r\nexport class CartItem{\r\n    constructor(public menuItem: MenuItem, public quantity: number = 1){}\r\n\r\n    value(): number{\r\n        return this.menuItem.price * this.quantity\r\n    }\r\n}","module.exports = \"<!--INICIO DO CARRINHO-->\\r\\n<div class=\\\"box box-solid\\\">\\r\\n  <div class=\\\"box-header\\\">\\r\\n    <i class=\\\"fa fa-shopping-cart\\\"></i>\\r\\n\\r\\n    <h3 class=\\\"box-title\\\">Carrinho</h3>\\r\\n  </div>\\r\\n  <!-- /.box-header -->\\r\\n  <div class=\\\"box-body\\\">\\r\\n    <div *ngIf=\\\"!items().length\\\"> <!-- Carrinho ira aparecer apenas quando conter itens-->\\r\\n      <p class=\\\"text-center\\\">\\r\\n        Seu carrinho está vazio!\\r\\n      </p>\\r\\n    </div>\\r\\n    <div class=\\\"table-responsive\\\" *ngIf=\\\"items().length\\\">\\r\\n        <table class=\\\"table\\\">\\r\\n          <tbody>\\r\\n          <tr *ngFor=\\\"let item of items()\\\" [@row]=\\\"rowState\\\"> <!-- Animação-->\\r\\n            <th>({{item.quantity}}x) {{item.menuItem.name}}</th>\\r\\n            <td class=\\\"text-right\\\">{{item.value() | currency: 'BRL': 'symbol'}}</td>\\r\\n            <td class=\\\"text-right\\\">\\r\\n              <a (click)=\\\"removeItem(item)\\\" class=\\\"btn btn-sm danger\\\"><i class=\\\"fa fa-remove\\\"></i></a>\\r\\n            </td>\\r\\n          </tr>\\r\\n          <tr>\\r\\n            <th>Total:</th>\\r\\n\\r\\n            <td class=\\\"text-right\\\">{{total() | currency: 'BRL': 'symbol'}}</td>\\r\\n          </tr>\\r\\n        </tbody></table>\\r\\n      </div>\\r\\n  </div>\\r\\n  <div class=\\\"box-footer\\\" *ngIf=\\\"items().length\\\">\\r\\n    <div class=\\\"pull-right\\\">\\r\\n      <button (click)=\\\"clear()\\\" type=\\\"button\\\" class=\\\"btn btn-danger\\\"><i class=\\\"fa fa-trash\\\"></i> Limpar</button>\\r\\n      <a [routerLink]=\\\"['/order']\\\" class=\\\"btn btn-success\\\"><i class=\\\"fa fa-credit-card\\\"></i> Fechar Pedido</a>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n<!-- FIM DO CARRINHO -->\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { ShoppingCartService } from './shopping-cart.service'; //Serviço de comunicação com backend\r\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\r\n\r\n@Component({\r\n  selector: 'mt-shopping-cart',\r\n  templateUrl: './shopping-cart.component.html',\r\n\r\n  //Com a nova compilação do angular 5 e 6, ele acaba tirando espaços em brancos , assim algumas vezez quebrando o CSS\r\n  preserveWhitespaces: true, //Utilizando essa propriedade no modulo desejado esse problema é resolvido\r\n  //Caso queira ativar esse atributo em todos componentes é preciso adicionar o preserveWhitespaces: true no arquivo main.ts\r\n  //Ja para o ambiente de produção é preciso adicionar esse atributo em tsconfig.json \r\n\r\n  //Animações\r\n  animations: [ \r\n    trigger('row', [\r\n      state('ready', style({opacity: 1})),\r\n      //Adicionando item ao carrinho\r\n      transition('void => ready', animate('500ms 0s ease-in', keyframes([ //Em keyframes você consegue definir animações mais complexas\r\n        style({opacity: 0, transform: 'translateX(-30px)', offset:0}), //offset define o periodo da animação, onde 1 = 100%\r\n        style({opacity: 0.8, transform: 'translateX(10px)', offset:0.8}), //Dessa maneira quando estiver em 80% sera executado o segundo style\r\n        style({opacity: 1, transform: 'translateX(0px)', offset:1}),\r\n      ]))),\r\n      //Removendo item do carrinho\r\n      transition('ready => void', animate('300ms 0s ease-out', keyframes([ \r\n        style({opacity: 1, transform: 'translateX(0px)', offset:0}), \r\n        style({opacity: 0.8, transform: 'translateX(-10px)', offset:0.2}), \r\n        style({opacity: 0, transform: 'translateX(30px)', offset:1}),\r\n      ])))\r\n    ])\r\n  ]\r\n})\r\nexport class ShoppingCartComponent implements OnInit {\r\n\r\n  rowState = 'ready'\r\n\r\n  constructor(private shoppingCartService: ShoppingCartService) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  //Exibindo os itens do carrinho\r\n  items(){\r\n    return this.shoppingCartService.items;\r\n  }\r\n\r\n  //Exibindo o total do carrinho\r\n  total():number{\r\n    return this.shoppingCartService.total()\r\n  }\r\n\r\n  //Limpar carrinho\r\n  clear(){\r\n    this.shoppingCartService.clear()\r\n  }\r\n\r\n  //Removendo item do carrinho\r\n  removeItem(item: any){\r\n    this.shoppingCartService.removeItem(item)\r\n  }\r\n\r\n  //Adicionando item ao carrinho\r\n  addItem(item: any){\r\n    this.shoppingCartService.addItem(item)\r\n  }\r\n}\r\n","//Serviço de compras\r\nimport { CartItem } from './cart-item.model';\r\nimport { MenuItem } from '../menu-item/menu-item.model';\r\nimport { Injectable } from '@angular/core';\r\nimport { NotificationService } from 'app/shared/messages/notification.service';\r\n\r\n@Injectable() //Todo serviço que recebe algo é marcado com injectable (notification)\r\nexport class ShoppingCartService{\r\n    items: CartItem [] = []//Coleção de items do carrinho\r\n\r\n    constructor(private notificationService: NotificationService){}\r\n\r\n    //Limpar carrinho\r\n    clear(){\r\n        this.items = []\r\n    }\r\n\r\n    //Adicionar item ao carrinho\r\n    addItem(item:MenuItem){\r\n        let foundItem = this.items.find((mItem)=> mItem.menuItem.id === item.id) //Metodo que verifica se o item ja esta no carrinho\r\n        if(foundItem){\r\n            this.increaseQty(foundItem) //Aumentando a quantidade\r\n        }else{\r\n            this.items.push(new CartItem(item)) //Adicionando item ao carrinho\r\n        }\r\n        this.notificationService.notify(`Você adicionou o item ${item.name}`) //Exibindo a notificação (snackBar)\r\n    }\r\n\r\n    //Aumentando quantidade\r\n    increaseQty(item:CartItem){\r\n        item.quantity = item.quantity + 1\r\n    }\r\n\r\n    //Diminuindo quantidade\r\n    decreaseQty(item: CartItem){\r\n        item.quantity = item.quantity - 1\r\n        if(item.quantity === 0){\r\n            this.removeItem(item)\r\n        }\r\n    }\r\n\r\n    //Remover item do carrinho\r\n    removeItem(item:CartItem){\r\n        this.items.splice(this.items.indexOf(item),1)\r\n        this.notificationService.notify(`Você removeu o item ${item.menuItem.name}`) //Exibindo a notificação (snackBar)\r\n    }\r\n\r\n    //Somar total do carrinho\r\n    total(): number{\r\n        return this.items\r\n            .map(item => item.value()) //Percorendo todos valores de cada item (metodo value multiplica valor pela quantidade)\r\n            .reduce((prev, value) => prev+value, 0) //Somando cada valor (0 é o valor inicial)\r\n    }\r\n}","module.exports = \"<a [routerLink]=\\\"['/restaurants/', restaurant.id]\\\">\\r\\n  <div class=\\\"place-info-box\\\" [@restaurantAppeared]=\\\"restaurantState\\\"> <!-- Aplicando animação de entrada-->\\r\\n    <span class=\\\"place-info-box-icon\\\"><img [src]=\\\"restaurant.imagePath\\\" /></span>\\r\\n\\r\\n    <div class=\\\"place-info-box-content\\\">\\r\\n      <span class=\\\"place-info-box-text\\\">{{restaurant.name}}</span>\\r\\n      <span class=\\\"place-info-box-star\\\"><i class=\\\"fa fa-star\\\"></i> {{restaurant.rating}}</span>\\r\\n      <span class=\\\"place-info-box-detail\\\">{{restaurant.category}}</span>\\r\\n      <span class=\\\"place-info-box-detail\\\">{{restaurant.deliveryEstimate}}</span>\\r\\n    </div>\\r\\n    <!-- /.info-box-content -->\\r\\n  </div>\\r\\n</a>\\r\\n\"","import { Component, OnInit, Input} from '@angular/core'; //Necessario peger o decorate Input, para que outros componentes possão passar dados para esse\r\nimport {trigger, state, style, transition, animate} from '@angular/animations'\r\n\r\n//Importando Interface\r\nimport { Restaurant } from './restaurant.model';\r\n\r\n@Component({\r\n  selector: 'mt-item-restaurant',\r\n  templateUrl: './item-restaurant.component.html',\r\n  animations: [//Animações\r\n    //Animação de entrada na pagina\r\n    trigger('restaurantAppeared', [\r\n      state('ready', style({opacity: 1})),\r\n      transition('void => ready', [ // Void representa quando não esta na aba, ou seja, essa animação sera aplicada quando for entrada na pagina (tambem é possivel aplicar na saida (ready => void))\r\n        style({opacity: 0, transform: 'translate(-30px, -10px)'}), //Aplicando estilo na transição\r\n        animate('500ms 0s ease-in-out')\r\n      ]) \r\n    ])\r\n  ]\r\n})\r\nexport class ItemRestaurantComponent implements OnInit {\r\n\r\n  restaurantState = 'ready'\r\n\r\n  @Input() restaurant: Restaurant\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \"<!-- INíCIO do CONTEÚDO -->\\r\\n<section class=\\\"content-header\\\">\\r\\n  <h1>\\r\\n    Todos os Restaurantes\\r\\n    <a (click)=\\\"toggleSearch()\\\" class=\\\"search-link pull-right\\\"><i class=\\\"fa fa-search\\\"></i><!-- Icone Barra de busca-->\\r\\n      <span *ngIf=\\\"iptSearch.value\\\"><small>\\\"{{iptSearch.value}}\\\"</small></span> <!-- iptSearch é a referencia do input de pesquisa (ou seja, só ira aparecer quando tiver um valor no input-->\\r\\n    </a>\\r\\n  </h1>\\r\\n\\r\\n  <!-- Barra de busca -->\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-xs-12 search-bar\\\" [@toggleSearch]=\\\"searchBarState\\\"> <!-- Escondida por padrão-->\\r\\n      <form [formGroup]=\\\"searchForm\\\">\\r\\n        <div class=\\\"form-group\\\"> <!-- Form Group-->\\r\\n          <input type=\\\"text\\\" #iptSearch formControlName=\\\"searchControl\\\" class=\\\"form-control\\\" placeholder=\\\"O que você esta procurando?\\\">\\r\\n        </div>\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\\r\\n</section>\\r\\n\\r\\n\\r\\n<section class=\\\"content\\\">\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n          <div *ngFor=\\\"let restaurant of restaurants\\\" class=\\\"col-sm-6 col-xs-12\\\">\\r\\n            <mt-item-restaurant [restaurant]=\\\"restaurant\\\"></mt-item-restaurant>\\r\\n          </div>\\r\\n          <!-- Caso não retorne nenhum restaurante, ou não seja encontrado resultados para pesquisa, exibir abaixo-->\\r\\n          <div *ngIf=\\\"restaurants?.length === 0\\\" class=\\\"col-xs-12\\\">\\r\\n            <p class=\\\"lead text-center\\\">\\r\\n              Não foram encontrados itens para sua busca.\\r\\n            </p>\\r\\n          </div>\\r\\n  </div>\\r\\n\\r\\n</section>\\r\\n\\r\\n<!-- FIM  do CONTEÚDO -->\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { Restaurant } from './item-restaurant/restaurant.model';\r\nimport { RestaurantsService } from './restaurants.service'; //Importando serviço que se comunica com o banco\r\nimport { trigger, state, style, transition, animate } from '@angular/animations';\r\nimport { FormBuilder, FormGroup, FormControl } from '@angular/forms';\r\n\r\n// from - Criar uma string atravez de um array\r\nimport { Observable, from } from 'rxjs';\r\nimport {switchMap, tap, debounceTime, distinctUntilChanged, catchError} from 'rxjs/operators'\r\n//switchMap - Substitui o observable\r\n//tap - Executa algo antes do subscrib\r\n//debounceTime - Coloca um tempo para para que outro observable seja chamado\r\n//distinctUntilChanged - Evitando que o mesmo conteudo seja passado varias vezes\r\n//catchError - tratamento de erro\r\n\r\n@Component({\r\n  selector: 'mt-restaurants',\r\n  templateUrl: './restaurants.component.html',\r\n  animations: [\r\n    trigger('toggleSearch', [ //Animação de esconder e aparecer barra de pesquisa\r\n      state('hidden', style({\r\n        opacity: 0,\r\n        \"max-height\" : \"0px\"\r\n      })),\r\n      state('visible', style({\r\n        opacity: 1,\r\n        \"max-height\" : \"70px\",\r\n        \"margin-top\": \"20px\"\r\n      })),\r\n      transition('* => *', animate('250ms 0s ease-in-out')) //'* => *' = de qualquer um para qualquer um\r\n    ])\r\n  ]\r\n})\r\nexport class RestaurantsComponent implements OnInit {\r\n\r\n  searchBarState = 'hidden'\r\n\r\n  restaurants: Restaurant[]\r\n\r\n  //Formulario\r\n  searchForm: FormGroup\r\n  searchControl: FormControl\r\n\r\n  constructor(private restaurantsService: RestaurantsService, private fb: FormBuilder) { } //Recebendo serviço no contrutor\r\n\r\n  ngOnInit() { //Metodo que é carregado quando a pagina é carregada\r\n\r\n    //Definindo formulario\r\n    this.searchControl = this.fb.control('')\r\n    this.searchForm = this.fb.group({\r\n      searchControl: this.searchControl\r\n    })\r\n\r\n    //Filtrando restaurantes\r\n    //valueChanges chama um evento toda vez que o campo é alterado (praticamente um event onChange)\r\n    this.searchControl.valueChanges\r\n      .pipe(//Utilizado para chamar operadores (filter, tap, map etc...)\r\n        debounceTime(500), //Um evento é chamdo apenas 5 segundos depois do outro (evitando que seja feita uma requisição para o back a cada letra digitada)\r\n        distinctUntilChanged(),//Não deixar que a mesma pesquisa seja feita varias vezes (por exemplo, pesquisar doces, e depois rapidamente apagar e escrever de novo)\r\n        switchMap(searchTerm => \r\n          this.restaurantsService\r\n            .restaurants(searchTerm) //switchMap substitui o Observable\r\n            .pipe(\r\n              catchError(error=> from([]))) //Caso não de erro retornar array vazio\r\n            )\r\n      )\r\n      .subscribe(restaurants => this.restaurants = restaurants) //Definindo o restaurants como os restaurantes pesquisados\r\n\r\n    //Pegando todos restaurantes\r\n    this.restaurantsService.restaurants()\r\n      .subscribe(restaurants => this.restaurants = restaurants) //subscribe efetua a requisição http do metodo do serviço para pegar os dados\r\n  }\r\n\r\n  //Metodo para aparecer barra de pesquisa\r\n  toggleSearch(){\r\n    this.searchBarState = this.searchBarState === 'hidden' ? 'visible' : 'hidden'\r\n  }\r\n\r\n}\r\n","//Serviço que ira se comunicar com o backend\r\nimport {Injectable} from '@angular/core' //Como sera recebido outro serviço (http) é preciso o injectable\r\nimport {HttpClient, HttpParams} from '@angular/common/http' //Para receber requisição http (Get, Post etc...)\r\n\r\nimport{Observable} from 'rxjs' //Metodos da api http retornam observables, então é preciso retorna-lo no metodo \r\n\r\nimport { Restaurant } from './item-restaurant/restaurant.model';\r\nimport { MenuItem } from 'app/restaurant-detail/menu-item/menu-item.model';\r\n\r\nimport { MEAT_API } from '../app.api'; //API de conexão com o backend\r\nimport { errorHandler } from '@angular/platform-browser/src/browser';\r\n\r\n@Injectable()\r\nexport class RestaurantsService {\r\n\r\n    constructor(private http:HttpClient){}\r\n\r\n    //Metodo para pegar todos restaurantes / ou listar o restaurante pela pesquisa\r\n    restaurants(search?: string): Observable<Restaurant[]>{ //Metodo que ira retornar os dados dos restaurantes\r\n        let params : HttpParams = undefined\r\n        if(search){\r\n            params = new HttpParams().set('q', search) //Passando parametros para o backend\r\n        }\r\n        return this.http.get<Restaurant[]>(`${MEAT_API}/restaurants`, {params: params}) //Requisição http // passando parametro para servidor pesquisar (json-serve aceita um parametro generico \"g\" para pesquisar geral)\r\n    }\r\n\r\n    //Metodo para pegar restaurante por ID\r\n    restaurantById(id:string): Observable<Restaurant>{\r\n        return this.http.get<Restaurant>(`${MEAT_API}/restaurants/${id}`)\r\n    }\r\n\r\n    //Trazendo os reviews do restaurante\r\n    reviewsOfRestaurant(id: string): Observable<any>{\r\n        return this.http.get(`${MEAT_API}/restaurants/${id}/reviews`)\r\n    }\r\n\r\n    //Pegando item do cardapio do menu\r\n    menuOfRestaurant(id: string): Observable<MenuItem[]>{\r\n        return this.http.get<MenuItem[]>(`${MEAT_API}/restaurants/${id}/menu`)\r\n\r\n\r\n        //Versão 4.0.0 pra baixo precisa dos comandos abaixo para fazer requisição\r\n        // .map(response => response.json())//Convertendo resposta em json\r\n        // .catch(ErrorHandler.handleError) //tratamento de erro\r\n    }\r\n}","//Classe para interceptar requisições do HttpClient\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs\";\r\nimport { Injectable, Injector } from \"@angular/core\";\r\nimport { LoginService } from \"./login/login.service\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor{\r\n\r\n    constructor(\r\n        private injector: Injector //Injector é referencia para o mecanismo de dependencia do angular ( atraves dele pode obter qualquer objeto dentro do conteniner de dependencia) \r\n        ){}\r\n    \r\n    //request - é a requisição que sera modificada (adicionando um header, modificando algo etc...)\r\n    //next - representa o proximo intercept a ser executado ou a chamada final para finalmente efetuar a requisição para o backend\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        \r\n        const loginService = this.injector.get(LoginService)//Pegando a referencia de LoginService e suas dependencias pelo Injector\r\n\r\n        //Se o usuario estiver logado, sera passado dentro do Header o token de Authorization, para efetuar o pedido de compra\r\n        if(loginService.isLoggedIn()){\r\n            \r\n            //A requisição é imutavel - por tando antes de modifica-la é preciso clona-la\r\n            const authRequest = request.clone({\r\n                setHeaders:{'Authorization': `Bearer ${loginService.user.accessToken}`} //Adicionando Header na requisição clonada\r\n            })\r\n            return next.handle(authRequest) //Retornando requisição alterada\r\n        }else{\r\n            return next.handle(request) //Chamando o proximo intercept, ou efetuar a requisição caso seja o ultimo intercept\r\n        }\r\n\r\n    }\r\n}","import { CanLoad, Route, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from \"@angular/router\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { LoginService } from \"./login/login.service\";\r\n\r\n//Metodos de segurança do login\r\n\r\n//Diferença CanLoad e CanActivate \r\n//CanLoad - Tratamentos antes de carregar o modulo\r\n//CanActivate - Tratamentos com o modulo ja carregado, efetuado toda vez que entrar no mesmo\r\n\r\n@Injectable()\r\nexport class LoggedInGuard implements CanLoad, CanActivate{\r\n\r\n    constructor(private loginService: LoginService){}\r\n\r\n    //Metodo para verificar se o usuario esta autenticado\r\n    checkAuthentication(path: string): boolean{\r\n        //Verificando se o usuario esta logado\r\n        const loggedIn = this.loginService.isLoggedIn()\r\n        if(!loggedIn){ //Se não estiver logado chamar metodo para redirecionar para tela de login\r\n           this.loginService.hadleLogin(`/${path}`) //Passando rota para ser navegada após o login\r\n        }\r\n\r\n        return loggedIn //Se o usuario estiver logado sera retorando True, assim liberando o carregamento do modulo\r\n    }\r\n\r\n    //Metodo de CanLoad\r\n    //Associado com rotas LoadChildrem (Decidindo se o modulo carregado de maneira tardia, sera mesmo carregado levando alguma condição em questão)\r\n    canLoad(route: Route) : boolean {\r\n        return this.checkAuthentication(route.path)\r\n    }\r\n\r\n    //Metodo de CanActivate\r\n    //ActivatedRouteSnapshot - Representa a rota ativada (Atual)\r\n    //RouterStateSnapshot - Arvore de Rotas (Todas rotas que foram acessadas antes da rota ativada)\r\n    canActivate(activatedRoute: ActivatedRouteSnapshot, routeState: RouterStateSnapshot): boolean{\r\n        return this.checkAuthentication(activatedRoute.routeConfig.path)\r\n    }\r\n}","module.exports = \"<!-- INÍCIO DO CONTEÚDO -->\\r\\n<section class=\\\"content login-content\\\" style=\\\"margin: 10% auto\\\">\\r\\n  <div class=\\\"login-logo\\\">\\r\\n       <b>MEAT</b> | Login\\r\\n  </div>\\r\\n  <div class=\\\"col-xs-12 col-sm-offset-3 col-sm-6 login-box-body\\\">\\r\\n  <p class=\\\"login-box-msg\\\">Por favor, efetue o login para continuar</p>\\r\\n\\r\\n  <form [formGroup] = \\\"loginForm\\\">\\r\\n    <mt-input-container [showTip]=\\\"false\\\">\\r\\n      <input type=\\\"text\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" placeholder=\\\"Email\\\">\\r\\n      <span class=\\\"glyphicon glyphicon-envelope form-control-feedback\\\"></span>\\r\\n    </mt-input-container>\\r\\n    <mt-input-container [showTip]=\\\"false\\\">\\r\\n      <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"Password\\\">\\r\\n      <span class=\\\"glyphicon glyphicon-lock form-control-feedback\\\"></span>\\r\\n    </mt-input-container>\\r\\n    <div class=\\\"row\\\">\\r\\n      <!-- /.col -->\\r\\n      <div class=\\\"col-xs-offset-8 col-xs-4\\\">\\r\\n        <button type=\\\"submit\\\" [disabled]=\\\"loginForm.invalid\\\" (click)=\\\"login()\\\" class=\\\"btn btn-primary btn-block btn-flat\\\">Entrar</button>\\r\\n      </div>\\r\\n      <!-- /.col -->\\r\\n    </div>\\r\\n  </form>\\r\\n  </div>\\r\\n</section>\\r\\n<!-- FIM DO CONTEÚDO -->\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { LoginService } from './login.service';\r\nimport { NotificationService } from 'app/shared/messages/notification.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'mt-login',\r\n  templateUrl: './login.component.html'\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  loginForm: FormGroup\r\n  navigateTo: string\r\n\r\n  constructor(\r\n    private fb: FormBuilder, \r\n    private loginService: LoginService,\r\n    private notificationService: NotificationService,\r\n    private activatedRoute: ActivatedRoute,\r\n    private router: Router) { }\r\n\r\n  ngOnInit() {\r\n    this.loginForm = this.fb.group({\r\n      email: this.fb.control('', [Validators.required, Validators.email]),\r\n      password: this.fb.control('', [Validators.required])\r\n    })\r\n\r\n    //Pegando caminho a ser navegado após efetuar o login\r\n    //Esse caminho é passado em loggedin.guard pelo metodo hadleLogin() de login.service\r\n    //Esse pagametro é pego atravez do proprio Router (Quando é passado para redirecionar para o login tambem é passado o caminho proximo a ser redirecionado)\r\n    this.navigateTo = this.activatedRoute.snapshot.params['to'] || btoa('/')\r\n  }\r\n\r\n  //Metodo para efetuar login\r\n  login(){\r\n    this.loginService.login(this.loginForm.value.email, this.loginForm.value.password)\r\n      .subscribe(\r\n        user => {this.notificationService.notify(`Bem vindo, ${user.name}`)},\r\n        error => {this.notificationService.notify(error.error.message)},\r\n        //O terceiro metodo do subscribe é executado apos a finalização do Observable\r\n        () => {this.router.navigate([atob(this.navigateTo)])} // atob - decodifica o caminho que foi codificado em btoa //Navegando para proxima pagina apos efetuar o login\r\n      )\r\n  }\r\n\r\n}\r\n","//Serviços para efetuar login\r\nimport { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\n\r\nimport { Observable } from \"rxjs\";\r\nimport { tap, filter} from \"rxjs/operators\"\r\n\r\nimport {MEAT_API} from '../../app.api'\r\nimport { User } from \"./user.model\";\r\nimport { Router, NavigationEnd } from \"@angular/router\";\r\n\r\n@Injectable()\r\nexport class LoginService{\r\n\r\n    user:User\r\n    lastUrl: string\r\n\r\n    constructor(private http:HttpClient, private router: Router){\r\n\r\n        //Pegando a URL da pagina que o usuario esta acessando (Para o usuario ser redirecionada para mesma apos efetuar o login)\r\n        this.router.events\r\n            .pipe( //Utilizado para chamar operadores (filter, tap, map etc...)\r\n                filter(event => event instanceof NavigationEnd)\r\n            )\r\n            .subscribe((event:NavigationEnd) => this.lastUrl = event.url)\r\n    }\r\n\r\n    isLoggedIn() : boolean{\r\n        return this.user !== undefined\r\n    }\r\n\r\n    //Metodo para efetuar o login, retornando assim o token\r\n    login(email: string, password: string) : Observable<User> {\r\n        return this.http.post<User>(`${MEAT_API}/login`, \r\n                {email: email, password: password})\r\n            .pipe(\r\n                tap( user => this.user = user) //Salvando usuario em memoria\r\n            )\r\n    }\r\n\r\n    //Metodo para redirecionar para tela de login\r\n    //path é o caminha que sera aberto após efetuar o login\r\n    hadleLogin(path: string = this.lastUrl){ //Passando a ultima URL acessada por padrão\r\n        this.router.navigate(['/login', btoa(path)]) //btoa - codificando a url, para aparecer melhor para o usuario\r\n    }\r\n\r\n    //Metodo para desconectar usuario\r\n    logout(){\r\n        this.user = undefined\r\n    }\r\n\r\n}","module.exports = \"<!-- A classe success é aplicada caso o input seja valido e o campo seja clicado ou digitado -->\\r\\n<div class=\\\"form-group has-feedback\\\" [class.has-success]=\\\"hasSuccess()\\\"\\r\\n                        [class.has-error]=\\\"hasError()\\\"> \\r\\n  <label class=\\\"control-label sr-only\\\" for=\\\"inputSuccess\\\"><i class=\\\"fa fa-check\\\"></i> {{label}}</label>\\r\\n\\r\\n  <ng-content></ng-content> <!-- Sera passado o input do formulario por aqui-->\\r\\n\\r\\n  <span class=\\\"help-block\\\" *ngIf=\\\"showTip && hasSuccess()\\\"><i class=\\\"fa fa-check\\\"></i> Ok</span> <!-- Mensagem exibida quando campo esta valido-->\\r\\n  <span class=\\\"help-block\\\" *ngIf=\\\"showTip && hasError()\\\"><i class=\\\"fa fa-check\\\"></i> {{errorMessage}}</span> <!-- Mensagem exibida quando campo esta invalido-->\\r\\n</div>\\r\\n\"","import { Component, OnInit, Input, ContentChild, AfterContentInit } from '@angular/core';\r\nimport {NgModel, FormControlName} from '@angular/forms'\r\n\r\n\r\n@Component({\r\n  selector: 'mt-input-container',\r\n  templateUrl: './input.component.html'\r\n})\r\nexport class InputComponent implements OnInit, AfterContentInit {\r\n\r\n  @Input() label: string //atributos com Input são recebidos de outro componente\r\n  @Input() errorMessage: string\r\n  @Input() showTip: boolean = true\r\n\r\n  input: any\r\n  \r\n  //Trabalhando com NgModel\r\n  @ContentChild(NgModel) model: NgModel //Referencia do NgModel, para referenciar os inputs para o form de order\r\n  //Ou trabalhando com FormControl\r\n  @ContentChild(FormControlName) control: FormControlName\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngAfterContentInit(){ //Assim que for definido o que sera colocado em <ng-content></ng-content> esse metodo sera chamada\r\n    this.input = this.model || this.control\r\n    if(this.input === undefined){\r\n      throw new Error('Esse componente precisa ser usado com uma diretiva ngModel ou formControlName')\r\n    }\r\n  }\r\n\r\n  //Metodo que retorna se o input esta valido\r\n  hasSuccess(): boolean{\r\n    return this.input.valid && (this.input.dirty || this.input.touched)\r\n  }\r\n\r\n  //Metodo que retorna se o input esta invalido\r\n  hasError(): boolean{\r\n    return this.input.invalid && (this.input.dirty || this.input.touched)\r\n  }\r\n\r\n}\r\n","//Serviço para o componente de notificação ser usado por outros componetes\r\nimport { EventEmitter } from \"@angular/core\";\r\n\r\nexport class NotificationService{\r\n    notifier = new EventEmitter<any>() //Atributo que é um evento, que sera disparado quando for passado uma mensagem\r\n\r\n    notify(message: string){ \r\n        this.notifier.emit(message) //disparando o evento mensagem, quando for passado para para o serviço (assim passando um observable para o componente snackbar)\r\n    }\r\n}","module.exports = \".snackbar{\\r\\n    min-width: 250px;\\r\\n    margin-left: -125px;\\r\\n    background-color: #333;\\r\\n    color: #fff;\\r\\n    text-align: center;\\r\\n    border-radius: 2px;\\r\\n    padding: 16px;\\r\\n    position: fixed;\\r\\n    z-index: 1;\\r\\n    left: 50%;\\r\\n    bottom: 30px;\\r\\n}\"","module.exports = \"<div class=\\\"snackbar\\\" [@snack-visibility]=\\\"snackVisibility\\\"> <!-- O estado da animação sera o valor do atributo snackVisibility-->\\r\\n  {{message}}\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { trigger, state, style, transition, animate} from '@angular/animations';\r\nimport { NotificationService } from '../notification.service';\r\n\r\nimport { Observable, timer} from 'rxjs'\r\nimport {tap, switchMap} from 'rxjs/operators'\r\n\r\n@Component({\r\n  selector: 'mt-snackbar',\r\n  templateUrl: './snackbar.component.html',\r\n  styleUrls: ['./snackbar.component.css'],\r\n  animations: [ //Array Animações\r\n    //Animações são definidas em trigger\r\n    trigger('snack-visibility', [ //Array de estados da animação\r\n      state('hidden', style({ //estilo css do estado\r\n        opacity: 0,\r\n        bottom: \"0px\"\r\n      })),\r\n      state('visible', style({\r\n        opacity: 1,\r\n        bottom: \"30px\"\r\n      })),\r\n      transition('hidden => visible', animate('500ms 0s ease-in')), //transição de um estado para o outro, e tempo de mudança (ease-in = começa rapido no começo)\r\n      transition('visible => hidden', animate('500ms 0s ease-out')) //ease-out = mais rapido no final\r\n    ])\r\n  ]\r\n})\r\nexport class SnackbarComponent implements OnInit {\r\n\r\n  message: string = 'Helo there!'\r\n\r\n  snackVisibility: string = 'hidden' //Atributo definindo o stado inicial da animação\r\n\r\n  constructor(private notificationService: NotificationService) { }\r\n\r\n  ngOnInit() {\r\n    this.notificationService.notifier //Quando for enviada uma mensagem pelo serviço sera disparada essa função\r\n      .pipe(//Pipe é Utilizado para chamar operadores (filter, tap, map etc...)\r\n        tap(message=>{ //tap recebe o parametro passado, e faz algo com ele antes do subscrib\r\n          this.message = message\r\n          this.snackVisibility = 'visible'\r\n        }),\r\n        //Timer, depois de 3 segundos ele volta para hidden, assim escondendo o snackBar\r\n        switchMap(message => timer(3000)) //switchmap troca o observable quando são chamados varios em seguida, ou seja, o timer ira ser zerado \r\n      )\r\n      .subscribe(timer=> this.snackVisibility = \"hidden\")\r\n  }\r\n\r\n}\r\n","module.exports = \"<div *ngFor=\\\"let option of options\\\">\\r\\n    <label>\\r\\n      <div (click)=\\\"setValue(option.value)\\\" class=\\\"iradio_flat-red\\\" [class.checked]=\\\"option.value === value\\\" aria-checked=\\\"false\\\" aria-disabled=\\\"false\\\"\\r\\n          style=\\\"position: relative;\\\"> <!-- Se o value de option for o mesmo que o do compoente, aplica classe css checked (para checkar o radio)-->\\r\\n          \\r\\n          <ins class=\\\"iCheck-helper\\\" style=\\\"position: absolute; top: 0%; left: 0%; display: block; width: 100%; height: 100%; margin: 0px; padding: 0px; background: rgb(255, 255, 255); border: 0px; opacity: 0;\\\"></ins>\\r\\n      </div>\\r\\n      {{option.label}}\\r\\n    </label>\\r\\n  </div>\\r\\n\"","import { Component, OnInit, Input, forwardRef } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms'\r\n\r\nimport { RadioOption } from './radio-option.model';\r\n\r\n@Component({\r\n  selector: 'mt-radio',\r\n  templateUrl: './radio.component.html',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(()=>RadioComponent), //Registrando o componente como um Value Accessor, para ser usado pelo NgModel\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class RadioComponent implements OnInit, ControlValueAccessor {\r\n\r\n  @Input() options: RadioOption[] //Opçoes recebidas de outro componente\r\n\r\n  value: any\r\n\r\n  onChange: any\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  setValue(value: any){ //Metodo do evento de click que marca o radio \r\n    this.value = value \r\n    this.onChange(this.value)\r\n  }\r\n\r\n    writeValue(obj: any): void{ //Diretivas passando um valor para o componente\r\n      this.value = obj\r\n    }\r\n\r\n    registerOnChange(fn: any): void{ //Chama função sempre que o valor interno do componente mudar\r\n      this.onChange = fn\r\n    }\r\n\r\n    registerOnTouched(fn: any): void{ //Registando se o usuario entrou ao componente\r\n    }\r\n\r\n    /**\r\n     * This function is called when the control status changes to or from \"DISABLED\".\r\n     * Depending on the value, it will enable or disable the appropriate DOM element.\r\n     *\r\n     * @param isDisabled\r\n     */\r\n    setDisabledState?(isDisabled: boolean): void{}\r\n}\r\n","module.exports = \"<!-- Exibindo cada estrela -->\\r\\n<i *ngFor=\\\"let r of rates\\\" class=\\\"fa\\\"\\r\\n    [class.fa-star]=\\\"r <= rate\\\" [class.fa-star-o]=\\\"r > rate\\\"\\r\\n    (click)=\\\"setRate(r)\\\"\\r\\n    (mouseenter)=\\\"setTemporaryRate(r)\\\"\\r\\n    (mouseleave)=\\\"clearTemporaryRate(r)\\\">\\r\\n\\r\\n<!-- Quando for clicado na estrela, sera chamado um metodo que ira definir o valor da avaliação como o numero da estrela\\r\\nse o valor da estrela for maior que a avaliação sera aplicada a classe (class.fa-star-o) que é uma estrela vazia -->\\r\\n\\r\\n<!-- (mouseenter) = evento que chama um metodo quando passa o mouse por cima da estrela\\r\\n     (mouseleave) = evento que chama um metodo quando tira o mouse de cima -->\\r\\n\"","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'mt-rating',\r\n  templateUrl: './rating.component.html'\r\n})\r\nexport class RatingComponent implements OnInit {\r\n\r\n  @Output() rated = new EventEmitter<number>() //Atributo que é diponibilizado para o componete pai\r\n\r\n  rates: number [] = [1,2,3,4,5] // Declarando cada estrela\r\n\r\n  rate: number = 0 //Valor da avaliação (de 0 a 5)\r\n\r\n  previousRate: number //Valor temporario, quando usuario passa o mouse por cima da estrela\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  //Metodo que ira definir a nota da avaliação (quantidade de estrelas) quando clicar\r\n  setRate(r: number){\r\n    this.rate = r\r\n    this.previousRate = undefined\r\n    this.rated.emit(r) //Passando evento que a avaliação foi setada para o elemento pai\r\n  }\r\n\r\n  //Ira definir a estrela quando passar o mouse por cima\r\n  setTemporaryRate(r: number){\r\n    if(this.previousRate === undefined){ //Salvando o valor original de rate\r\n      this.previousRate = this.rate\r\n    }\r\n    this.rate = r\r\n  }\r\n\r\n  //Voltar para o valor da avaliação original quando tirar o mouse das estrelas\r\n  clearTemporaryRate(r: number){\r\n    if(this.previousRate !== undefined){\r\n      this.rate = this.previousRate\r\n      this.previousRate = undefined\r\n    }\r\n  }\r\n}\r\n","//Modulo shared (Para compartilhar com outros modulos)\r\n//Modulo não referenciado em app.modulo.ts, que é carregado aparte\r\nimport { NgModule, ModuleWithProviders } from \"@angular/core\";\r\n\r\n//Dependencias que precisam ser importadas\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\n//Componentes que seram compartilhados com outros modulos\r\nimport { InputComponent } from './input/input.component'\r\nimport { RadioComponent} from './radio/radio.component'\r\nimport { RatingComponent} from './rating/rating.component'\r\nimport { SnackbarComponent } from './messages/snackbar/snackbar.component';\r\n\r\n//Providers\r\nimport { ShoppingCartService } from 'app/restaurant-detail/shopping-cart/shopping-cart.service';\r\nimport { RestaurantsService } from 'app/restaurants/restaurants.service';\r\nimport { OrderService } from 'app/order/order.service';\r\nimport { NotificationService } from \"./messages/notification.service\";\r\nimport { LoginService } from \"app/security/login/login.service\";\r\nimport { LoggedInGuard } from \"app/security/loggedin.guard\";\r\nimport { LeaveOrderGuard } from \"app/order/leave-order.guard\";\r\n\r\n//HtppIntercptor - Intercepta requisições http\r\nimport { HTTP_INTERCEPTORS } from \"@angular/common/http\"; //Token que deve ser referenciado no intercpt\r\nimport { AuthInterceptor } from \"app/security/auth.interceptor\";\r\n\r\n@NgModule({\r\n    declarations: [InputComponent, RadioComponent, RatingComponent, SnackbarComponent], //Declarando componentes desse modulo\r\n    imports: [FormsModule, ReactiveFormsModule, CommonModule], //Importando dependencias desse modulo\r\n    exports: [InputComponent, RadioComponent, RatingComponent,SnackbarComponent, //Definindo componentes desse modulo que seram compartilhados para outros modulos\r\n            FormsModule, ReactiveFormsModule, CommonModule] //Definindo dependencias que seram compatilhadas com outros modulos(assim os outros modulos não precisaram importar essas dependencias)\r\n})\r\nexport class SharedModule{\r\n\r\n    //Exportando os serviços\r\n    static forRoot(): ModuleWithProviders{\r\n        return {\r\n            ngModule: SharedModule,\r\n            providers: [\r\n                ShoppingCartService, \r\n                RestaurantsService, \r\n                OrderService, \r\n                NotificationService,\r\n                LoginService,\r\n                LoggedInGuard,\r\n                LeaveOrderGuard,\r\n                {provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi:true} //Intercept\r\n            ]\r\n        }\r\n    }\r\n}","// The file contents for the current environment will overwrite these during build.\r\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\r\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\r\n// The list of which env maps to which file can be found in `angular-cli.json`.\r\n\r\n//Personalizando variaveis de ambiente no desenvolvimento\r\nexport const environment = {\r\n  production: false,\r\n  api: 'https://localhost:3001'\r\n};\r\n","//import './polyfills.ts';\r\n\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { environment } from './environments/environment';\r\nimport { AppModule } from './app/';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\r\n// platformBrowserDynamic().bootstrapModule(AppModule, {preserveWhitespaces: true});\r\n\r\n"],"sourceRoot":""}